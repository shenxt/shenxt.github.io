<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shen Xiaotao blog</title>
  
  <subtitle>申小涛的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-19T15:05:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Japser Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Comments for MetFlow</title>
    <link href="http://yoursite.com/2018/10/13/20181013-metflow-comment/"/>
    <id>http://yoursite.com/2018/10/13/20181013-metflow-comment/</id>
    <published>2018-10-13T06:10:44.000Z</published>
    <updated>2018-10-19T15:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<p align="justify" style="margin:5px">If you have any question about <code>MetFlow</code>, please leave a message for us.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p align=&quot;justify&quot; style=&quot;margin:5px&quot;&gt;If you have any question about &lt;code&gt;MetFlow&lt;/code&gt;, please leave a message for us.&lt;/p&gt;

      
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/categories/English/Metabolomics/"/>
    
      <category term="MetFlow" scheme="http://yoursite.com/categories/English/Metabolomics/MetFlow/"/>
    
    
      <category term="Metabolomics" scheme="http://yoursite.com/tags/Metabolomics/"/>
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="MetFlow" scheme="http://yoursite.com/tags/MetFlow/"/>
    
  </entry>
  
  <entry>
    <title>使用CSI:FingerID 进行代谢物鉴定</title>
    <link href="http://yoursite.com/2018/07/07/20180707-CSI-FingerID/"/>
    <id>http://yoursite.com/2018/07/07/20180707-CSI-FingerID/</id>
    <published>2018-07-07T06:16:29.000Z</published>
    <updated>2018-07-07T07:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>CSI:FingerID是德国Friedrich Schiller University的Sebastian Böckera教授开发的一款基于机器学习和代谢物finger ID的代谢物鉴定软件。发表在<a href="http://www.pnas.org/content/pnas/112/41/12580.full.pdf" target="_blank" rel="external">PNAS</a>上。最近因为需要使用它进行代谢物鉴定，因此下面对其原理以及使用做一个简单介绍。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>CSI:FingerID的基本原来是使用FigerID来表示代谢物，代谢物的Figer ID是一串0 1 0 1的数字，将代谢物转变为一系列碎片表示，然后按照顺序排列，如果某个代谢物含有该碎片，则表示为1，没有该碎片，则表示为0。因此，使用figer ID，可以将代谢物用数字表示。</p><ul><li>训练阶段</li></ul><p>作者从标准品MS2数据库中提取代谢物，然后将其二级谱图转变为fragmentation tree，fragmentation tree的有关知识可以参考该文章，<a href="http://www.pnas.org/content/pnas/112/41/12580.full.pdf" target="_blank" rel="external">http://www.pnas.org/content/pnas/112/41/12580.full.pdf</a>。随后，从代谢物的结构式出发，得到代谢物的finger ID，然后对于每一个finger ID的molecular property，对建立fragmentation tree和其之间的SVM模型。从而得到一个使用fragmentation tree预测finger ID的机器学习预测模型。</p><p><img src="learning.png" alt=""></p><ul><li>预测阶段</li></ul><p>拿到一个未知代谢物的二级谱图，首选将其转换为fragmentation tree，然后代入预测模型，预测出其理论的molecular property，然后得到其预测的finger ID。</p><p><img src="prediction.png" alt=""></p><ul><li>打分阶段</li></ul><p>将PubChem以及其他可以拿到的数据库中的所有代谢物的fingerID拿到，然后将未知代谢物的预测fingerID和其进行匹配打分（打分规则具体可以看论文），从而得到每个未知代谢物的candidates。</p><p><img src="scoring.png" alt=""></p><h4 id="软件使用"><a href="#软件使用" class="headerlink" title="软件使用"></a>软件使用</h4><ul><li>下载</li></ul><p>CSI:FingerID作者使用Java写了本地的软件版本，可以直接从其<a href="http://www.pnas.org/content/pnas/112/41/12580.full.pdf" target="_blank" rel="external">官网</a>上下载。选择自己电脑对应的版本即可。</p><p><img src="download.png" alt=""></p><ul><li>打开软件</li></ul><p>下载到本地之后，无需安装，直接解压缩，然后双击.exe文件即可（我使用的windowns 64位系统）。他们也写有说明文档，不多，一共四十多页，但是真正讲解怎么使用的可能不到20页，还是非常清楚简洁的。可以下载下来仔细看看。</p><p><img src="software.png" alt=""></p><ul><li>开始使用</li></ul><p>打开软件之后，界面如下图所示。</p><p><img src="interface.png" alt=""></p><p>因为我是需要使用批量处理，因此我就从如何批量处理讲解他的使用。首先，该软件接收的文件类型包括txt以及mgf，msp是非常普遍以及常用的，因此，推荐大家使用mgf格式文件。大家可以使用我的示例数据，是R文件，包含5个2级谱图。大家可以<a href="http://oxr5qv74w.bkt.clouddn.com/temp.ms2" target="_blank" rel="external">点击此处下载</a>。下载之后，需要在R中打开，并将其转变为符合软件要求的格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">##先加载数据</div><div class="line">load(&quot;temp.ms2&quot;)</div><div class="line">ms2.pos &lt;- temp.ms2</div><div class="line"></div><div class="line">##然后将该数据转为软件所需格式，并写出为mgf格式</div><div class="line">for(i in 1:length(ms2.pos))&#123;</div><div class="line">  cat(i, &quot; &quot;)</div><div class="line">  temp.ms2 &lt;- ms2.pos[[i]]</div><div class="line"></div><div class="line">  fn.save &lt;- paste0(temp.ms2[[1]][1,1], &apos;.mgf&apos;)</div><div class="line">  #</div><div class="line">  info &lt;- temp.ms2[[1]]</div><div class="line">  spec &lt;- temp.ms2[[2]]</div><div class="line">  #</div><div class="line">  sink(fn.save)</div><div class="line">  cat(&quot;BEGIN IONS\n&quot;)</div><div class="line">  cat(paste(&quot;PEPMASS=&quot;, info[2,1], sep = &quot;&quot;))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line">  cat(&quot;MSLEVEL=1\n&quot;)</div><div class="line">  cat(&quot;CHARGE=1+\n&quot;)</div><div class="line">  cat(c(info[2,1], 1))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line">  cat(&quot;END IONS\n&quot;)</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line"></div><div class="line">  cat(&quot;BEGIN IONS\n&quot;)</div><div class="line">  cat(paste(&quot;PEPMASS=&quot;, info[2,1], sep = &quot;&quot;))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line">  cat(&quot;MSLEVEL=2\n&quot;)</div><div class="line">  cat(&quot;CHARGE=1+\n&quot;)</div><div class="line"></div><div class="line">  for(idx in 1:nrow(spec))&#123;</div><div class="line">    cat(paste(spec[idx, ], collapse = &apos; &apos;), &apos;\n&apos;, sep = &apos;&apos;)</div><div class="line">  &#125;</div><div class="line">  cat(&quot;END IONS\n&quot;)</div><div class="line">  sink()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>每个谱图单独输出为一个文件。</p><ul><li>导入谱图</li></ul><p>点击Batch import按钮（在软件左上角），然后选择要导入的mgf文件。所有导入谱图的信息都在左侧列出。</p><ul><li>开始计算</li></ul><p>点击Compute all按钮（在软件正上方），然后设置参数，参数都是比较常见的，比如polarity，加和物形式等。然后点击CSI：fingerID，并点击submit。开始计算。</p><ul><li>导出结果</li></ul><p>点击Export Results按钮。可以将鉴定结果导出为CSV格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h4&gt;&lt;p&gt;CSI:FingerID是德国Friedrich Schiller University的Sebastian Böckera
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/categories/Chinese/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/tags/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据的读取和输出</title>
    <link href="http://yoursite.com/2018/06/03/R-study3/"/>
    <id>http://yoursite.com/2018/06/03/R-study3/</id>
    <published>2018-06-03T14:41:44.000Z</published>
    <updated>2018-06-03T14:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据的读取和输出"><a href="#数据的读取和输出" class="headerlink" title="数据的读取和输出"></a>数据的读取和输出</h4><p>我们使用R语言来进行数据处理，那么就需要将本地的数据读取到R中，当在R中进行一定的处理之后，我们也需要将处理之后的数据输出。因此，本文就给大家介绍一下，R语言中最基本的数据读取和输出的方法。</p><h4 id="如何设置工作路径"><a href="#如何设置工作路径" class="headerlink" title="如何设置工作路径"></a>如何设置工作路径</h4><p>工作路径（work directory）是指当前R的文件夹地址在哪？如果想知道自己现在的工作路径是什么，可以使用下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getwd()</div></pre></td></tr></table></figure><p>就会显示出来当前的工作路径在哪里，意思就是你直接输出的各种那文件，就会直接输出到这个文件夹里面。</p><p>那么比如我们现在有文件在另外一个文件夹里，在F盘的test里面，我想从这个里面读取我的数据，那么我该怎么做呢？那就需要将路径设置在该文件夹下，使用下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setwd(&quot;F:/test&quot;)</div></pre></td></tr></table></figure><p>注意一定要是使用反斜杠。</p><p>记住这两个函数，getwd和setwd，那么就可以将工作路径设置在我们想要的任何文件夹下面了。下面我们开始介绍最为常见的几种文件格式在R语言中的读取和输出。</p><h4 id="csv文件"><a href="#csv文件" class="headerlink" title="csv文件"></a>csv文件</h4><p>csv文件是我们平时最为常见的文件了。全称为逗号分隔符文件。在R中，有现成的函数可以读取它。我们假设现在有一个数据，data.csv，在F盘的test文件夹中。我们现在要读取它，那么可以使用下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#首选我们把路径设置到相应文件夹</div><div class="line">setwd(&quot;F:/test&quot;)</div><div class="line">data &lt;- read.csv(file = &quot;data.csv&quot;, stringsAsFactors = FALSE)</div></pre></td></tr></table></figure><p>对的，就是使用read.csv函数，该函数就是用来读取csv文件的函数。他的参数有很多，我们来选几个最为常用的来说明一下，其他的可以使用?read.csv来参考官方文档</p><ul><li>file：就是指要读取的文件的名称，比如上面的例子就是data.csv。注意后缀名一定要在。</li><li>header：是指文件是否有列名。如果设置为TRUE，则将第一行读取为该文件的列名。</li><li>stringsAsFactors：是否把文件的非数值型数据读取为factor类型。一般来说，我们都不需要，如果读取之后，需要将其转换为factor类型，那么后续可以自己手动转变。<strong>因此这里一定要将该参数设置为FALSE。</strong></li></ul><p>那么我们怎么输出csv文件呢？这就用到另外一个函数write.csv：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#将data数据输出为csv文件</div><div class="line">write.csv(x = data, file = &quot;data1.csv&quot;, row.names = FALSE)</div></pre></td></tr></table></figure><p>我们也来简单介绍一下write.csv函数的常见参数含义：</p><ul><li>x：就是你要输出的数据的名字，比如我们输出的数据是data，因此就设置为data。</li><li>file：是要输出数据的文件名。比如我们将data这个数据输出为data1.csv。</li><li>row.names：是指输出的csv文件的行名是否要自动加上。如果设置为TRUE，那么输出的数据会加上行名，设置为FALSE，则不会加上行名。</li></ul><p>一般来说，上面的read.csv和write.csv函数就可以满足大多数的csv文件的读取和输出要求了，但是如果文件很大的话，那么这两个函数就会显的速度比较慢了，因此有另外一个由wickham大神写的包readr就非常的厉害了。下面同样使用readr包读取同样的数据，大家可以自行感受一下两者速度的差异：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#首先安装readr</div><div class="line">install.packages(&quot;readr&quot;)</div><div class="line">library(&quot;readr&quot;)</div><div class="line">#读取数据</div><div class="line">data &lt;- read_csv(file = &quot;data.csv&quot;)</div><div class="line">#输出数据</div><div class="line">readr::write_csv(x = data, path = &quot;data1.csv&quot;)</div></pre></td></tr></table></figure><p>readr包中的read_csv和write_csv分别用来读取和输出数据。参数更加简洁。因此，强烈推荐大家使用这两个函数来进行数据的读取和输出。</p><h4 id="xls和xlsx"><a href="#xls和xlsx" class="headerlink" title="xls和xlsx"></a>xls和xlsx</h4><p>跟csv相比，excle表格文件就更加普遍了。一般来说，有xlx和xlsx两种文件。在这里，我们直接就推荐wicham的另外一个包，readxl包来进行这两种数据的读取和输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#首先安装readxl</div><div class="line">install.packages(&quot;readxl&quot;)</div><div class="line">library(&quot;readr&quot;)</div><div class="line">#读取数据</div><div class="line">data &lt;- readxl::read_excel(path = &quot;data.xlsx&quot;)</div><div class="line">#输出数据</div><div class="line">write_excel_csv(x = data, path = &quot;data2.xlsx&quot;)</div></pre></td></tr></table></figure><p>需要注意的是，write_excel_csv函数是包含在包readr中的。向大家强烈推荐这两个包用来处理csv，xlsx，xls文件的处理。</p><h4 id="text文件"><a href="#text文件" class="headerlink" title="text文件"></a>text文件</h4><p>另外一种常见文件就是txt文件了。可以使用R中自带的函数read.table。</p><p>介绍一下read.table的常用参数：</p><ul><li>file：读取数据的名称。</li><li>header：是否要把第一行变为列名，默认为FALSE。</li><li>sep：列之间的分隔符是什么？默认是空格，也就是sep=””，还有另外两种比较常见的，逗号，sep=”,”，其实就是csv文件了，还有sep=”\t”，也就是制表符。如果读取数据有问题的话， 可以试着改变sep来看看。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们常见的几种数据的读取和输出就介绍到这了，其实就两个包和一个函数，readr，readxl和read.table。所有数据及代码已放到github上，请猛戳阅读原文获得链接。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据的读取和输出&quot;&gt;&lt;a href=&quot;#数据的读取和输出&quot; class=&quot;headerlink&quot; title=&quot;数据的读取和输出&quot;&gt;&lt;/a&gt;数据的读取和输出&lt;/h4&gt;&lt;p&gt;我们使用R语言来进行数据处理，那么就需要将本地的数据读取到R中，当在R中进行一定的处理之后，
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R语言" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/tags/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
      <category term="R语言" scheme="http://yoursite.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>R语言入门</title>
    <link href="http://yoursite.com/2018/06/03/R-study2/"/>
    <id>http://yoursite.com/2018/06/03/R-study2/</id>
    <published>2018-06-03T14:41:11.000Z</published>
    <updated>2018-06-03T14:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，否则你将浪费人生中的十分钟。。。"><a href="#这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，否则你将浪费人生中的十分钟。。。" class="headerlink" title="这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，否则你将浪费人生中的十分钟。。。"></a>这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，<strong>否则你将浪费人生中的十分钟。。。</strong></h5><h3 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h3><h4 id="向量-（vector）：R语言中的战斗机"><a href="#向量-（vector）：R语言中的战斗机" class="headerlink" title="向量 （vector）：R语言中的战斗机"></a>向量 （vector）：R语言中的战斗机</h4><h5 id="向量类型是R语言的核心，很多运算都涉及到向量。我们先来一个最简单的向量。"><a href="#向量类型是R语言的核心，很多运算都涉及到向量。我们先来一个最简单的向量。" class="headerlink" title="向量类型是R语言的核心，很多运算都涉及到向量。我们先来一个最简单的向量。"></a>向量类型是R语言的核心，很多运算都涉及到向量。我们先来一个最简单的向量。</h5><h5 id="直接在控制台（Rstudio左下角的那个地方）中输入："><a href="#直接在控制台（Rstudio左下角的那个地方）中输入：" class="headerlink" title="直接在控制台（Rstudio左下角的那个地方）中输入："></a>直接在控制台（Rstudio左下角的那个地方）中输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x &lt;- 3</div><div class="line">x</div></pre></td></tr></table></figure><h5 id="x就是一个向量，一维的，3就是元素，只是只有一个，光杆司令。"><a href="#x就是一个向量，一维的，3就是元素，只是只有一个，光杆司令。" class="headerlink" title="x就是一个向量，一维的，3就是元素，只是只有一个，光杆司令。"></a>x就是一个向量，一维的，3就是元素，只是只有一个，光杆司令。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">y &lt;- c(1, 2, 3)</div><div class="line">y</div><div class="line">length(y)</div><div class="line">y[1]</div><div class="line">y[3]</div><div class="line">x[1]</div></pre></td></tr></table></figure><h5 id="“-lt-”是R语言中赋予的符号，在这个公式中，意味着我们把3这个值赋给x这个变量名，这样x就是3，但是3不一定是x。"><a href="#“-lt-”是R语言中赋予的符号，在这个公式中，意味着我们把3这个值赋给x这个变量名，这样x就是3，但是3不一定是x。" class="headerlink" title="“&lt;-”是R语言中赋予的符号，在这个公式中，意味着我们把3这个值赋给x这个变量名，这样x就是3，但是3不一定是x。"></a>“&lt;-”是R语言中赋予的符号，在这个公式中，意味着我们把3这个值赋给x这个变量名，这样x就是3，但是3不一定是x。</h5><h5 id="我们再创建一个长度不是1的向量，"><a href="#我们再创建一个长度不是1的向量，" class="headerlink" title="我们再创建一个长度不是1的向量，"></a>我们再创建一个长度不是1的向量，</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">y &lt;- c(1, 2, 3)</div><div class="line">y</div><div class="line">length(y)</div><div class="line">y[1]</div><div class="line">y[3]</div><div class="line">x[1]</div></pre></td></tr></table></figure><h5 id="y就是一个长度为3的向量。length函数是用来查看向量长度的函数。对于y向量来说，他的元素就是1-2-3。向量中的元素是有顺序的，第一个从1开始计算，比如我想要查看向量y的第一个元素，那么就使用y-1-。y-1-代表的就是向量y的第一个元素，那么同样的y的第三个元素就是y-3-。"><a href="#y就是一个长度为3的向量。length函数是用来查看向量长度的函数。对于y向量来说，他的元素就是1-2-3。向量中的元素是有顺序的，第一个从1开始计算，比如我想要查看向量y的第一个元素，那么就使用y-1-。y-1-代表的就是向量y的第一个元素，那么同样的y的第三个元素就是y-3-。" class="headerlink" title="y就是一个长度为3的向量。length函数是用来查看向量长度的函数。对于y向量来说，他的元素就是1,2,3。向量中的元素是有顺序的，第一个从1开始计算，比如我想要查看向量y的第一个元素，那么就使用y[1]。y[1]代表的就是向量y的第一个元素，那么同样的y的第三个元素就是y[3]。"></a>y就是一个长度为3的向量。length函数是用来查看向量长度的函数。对于y向量来说，他的元素就是1,2,3。向量中的元素是有顺序的，第一个从1开始计算，比如我想要查看向量y的第一个元素，那么就使用y[1]。y[1]代表的就是向量y的第一个元素，那么同样的y的第三个元素就是y[3]。</h5><h4 id="矩阵（matrix）："><a href="#矩阵（matrix）：" class="headerlink" title="矩阵（matrix）："></a>矩阵（matrix）：</h4><h5 id="R中的矩阵概念跟数学中完全一样。矩阵可以理解为二维的向量，也就是包括行数和列数。下面我们举个栗子："><a href="#R中的矩阵概念跟数学中完全一样。矩阵可以理解为二维的向量，也就是包括行数和列数。下面我们举个栗子：" class="headerlink" title="R中的矩阵概念跟数学中完全一样。矩阵可以理解为二维的向量，也就是包括行数和列数。下面我们举个栗子："></a>R中的矩阵概念跟数学中完全一样。矩阵可以理解为二维的向量，也就是包括行数和列数。下面我们举个栗子：</h5><p><img src="https://note.youdao.com/favicon.ico" alt="image"></p><p><img src="https://note.youdao.com/yws/public/resource/65076dda883d93a792dc64163dec905a/xmlnote/C5243CEBF42A43FFBD8F9F48EA00113C/18906" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m &lt;- rbind(c(1,2), c(2,3))</div><div class="line">m</div></pre></td></tr></table></figure><h5 id="rbind是一个函数，我们简单介绍一下。rbind直接从字面上理解是row-combine，也就是行组合。什么意思呢？就是把几个向量按照行从上到下组合起来。用图可以很好地理解：（灵魂画师上线。。。）"><a href="#rbind是一个函数，我们简单介绍一下。rbind直接从字面上理解是row-combine，也就是行组合。什么意思呢？就是把几个向量按照行从上到下组合起来。用图可以很好地理解：（灵魂画师上线。。。）" class="headerlink" title="rbind是一个函数，我们简单介绍一下。rbind直接从字面上理解是row combine，也就是行组合。什么意思呢？就是把几个向量按照行从上到下组合起来。用图可以很好地理解：（灵魂画师上线。。。）"></a>rbind是一个函数，我们简单介绍一下。rbind直接从字面上理解是row combine，也就是行组合。什么意思呢？就是把几个向量按照行从上到下组合起来。用图可以很好地理解：（灵魂画师上线。。。）</h5><p><img src="https://note.youdao.com/yws/public/resource/65076dda883d93a792dc64163dec905a/xmlnote/ECBE039B1F874792A3A8A6FCAE9D2700/17899" alt=""></p><h5 id="rbind函数就是把向量1和2然后按照行组合起来，成为一个新的矩阵。从这上面可以看到必须满足两个条件，向量1和2必须长度一致。同样还有一个函数，cbind，大家应该猜到了，就是column-combine，也就是把几个向量按照列从左到右组合。"><a href="#rbind函数就是把向量1和2然后按照行组合起来，成为一个新的矩阵。从这上面可以看到必须满足两个条件，向量1和2必须长度一致。同样还有一个函数，cbind，大家应该猜到了，就是column-combine，也就是把几个向量按照列从左到右组合。" class="headerlink" title="rbind函数就是把向量1和2然后按照行组合起来，成为一个新的矩阵。从这上面可以看到必须满足两个条件，向量1和2必须长度一致。同样还有一个函数，cbind，大家应该猜到了，就是column combine，也就是把几个向量按照列从左到右组合。"></a>rbind函数就是把向量1和2然后按照行组合起来，成为一个新的矩阵。从这上面可以看到必须满足两个条件，向量1和2必须长度一致。同样还有一个函数，cbind，大家应该猜到了，就是column combine，也就是把几个向量按照列从左到右组合。</h5><h5 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m2 &lt;- cbind(c(1,2,3,4), c(2,3,4,5))</div><div class="line">dim(m2)</div></pre></td></tr></table></figure><h5 id="dim是查看矩阵的行数和列数。那么，怎么查看矩阵的某个元素呢？和向量一样，需要使用-来看，但是要看单个元素，得使用行数和列数来进行确定，比如"><a href="#dim是查看矩阵的行数和列数。那么，怎么查看矩阵的某个元素呢？和向量一样，需要使用-来看，但是要看单个元素，得使用行数和列数来进行确定，比如" class="headerlink" title="dim是查看矩阵的行数和列数。那么，怎么查看矩阵的某个元素呢？和向量一样，需要使用[]来看，但是要看单个元素，得使用行数和列数来进行确定，比如:"></a><strong>dim是查看矩阵的行数和列数。那么，怎么查看矩阵的某个元素呢？和向量一样，需要使用[]来看，但是要看单个元素，得使用行数和列数来进行确定，比如:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m2[1,2]</div></pre></td></tr></table></figure><h5 id="就是指m2的第1行和第2列的元素是什么东东。"><a href="#就是指m2的第1行和第2列的元素是什么东东。" class="headerlink" title="就是指m2的第1行和第2列的元素是什么东东。"></a>就是指m2的第1行和第2列的元素是什么东东。</h5><h5 id="那么，能够直接从矩阵中提取子向量和子矩阵呢？当然阔以："><a href="#那么，能够直接从矩阵中提取子向量和子矩阵呢？当然阔以：" class="headerlink" title="那么，能够直接从矩阵中提取子向量和子矩阵呢？当然阔以："></a>那么，能够直接从矩阵中提取子向量和子矩阵呢？当然阔以：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">m2[2,]</div><div class="line">m2[,1]</div><div class="line">m2[c(1,2),]</div><div class="line">m2[2,]#就是指m2的第2行的所有元素</div><div class="line">m2[,1]#就是指m2的第1列的所有元素</div><div class="line">m2[c(1,2),]#就是指把m2的第1和第2行的矩阵</div></pre></td></tr></table></figure><h5 id="注意：-也就是井号，是注释的意思，也就是-后面的代码是不会运行的，所以如果你想要对代码进行注释说明，那么就可以像上面一样，加一个-号，然后在后面写下注释的内容。"><a href="#注意：-也就是井号，是注释的意思，也就是-后面的代码是不会运行的，所以如果你想要对代码进行注释说明，那么就可以像上面一样，加一个-号，然后在后面写下注释的内容。" class="headerlink" title="注意：#也就是井号，是注释的意思，也就是#后面的代码是不会运行的，所以如果你想要对代码进行注释说明，那么就可以像上面一样，加一个#号，然后在后面写下注释的内容。"></a>注意：#也就是井号，是注释的意思，也就是#后面的代码是不会运行的，所以如果你想要对代码进行注释说明，那么就可以像上面一样，加一个#号，然后在后面写下注释的内容。</h5><h4 id="数据框（data-frame）"><a href="#数据框（data-frame）" class="headerlink" title="数据框（data.frame）"></a>数据框（data.frame）</h4><h5 id="数据框和矩阵是非常类似的，但是完全不一样的，就是矩阵中的元素类型必须一致，而数据框中的元素类型则可以不同。"><a href="#数据框和矩阵是非常类似的，但是完全不一样的，就是矩阵中的元素类型必须一致，而数据框中的元素类型则可以不同。" class="headerlink" title="数据框和矩阵是非常类似的，但是完全不一样的，就是矩阵中的元素类型必须一致，而数据框中的元素类型则可以不同。"></a>数据框和矩阵是非常类似的，但是完全不一样的，就是矩阵中的元素类型必须一致，而数据框中的元素类型则可以不同。</h5><h5 id="比如我们有3个同学的语文，数学成绩。第一列是同学的名字（字符型，character），第二列是语文成绩（数字型，numeric），第三列是数学成绩（数字型，numeric）。这时候就得使用数据框了。"><a href="#比如我们有3个同学的语文，数学成绩。第一列是同学的名字（字符型，character），第二列是语文成绩（数字型，numeric），第三列是数学成绩（数字型，numeric）。这时候就得使用数据框了。" class="headerlink" title="比如我们有3个同学的语文，数学成绩。第一列是同学的名字（字符型，character），第二列是语文成绩（数字型，numeric），第三列是数学成绩（数字型，numeric）。这时候就得使用数据框了。"></a>比如我们有3个同学的语文，数学成绩。第一列是同学的名字（字符型，character），第二列是语文成绩（数字型，numeric），第三列是数学成绩（数字型，numeric）。这时候就得使用数据框了。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d &lt;- data.frame(name = c(&quot;Shen&quot;, &quot;Li&quot;, &quot;Tu&quot;),</div><div class="line">Yuwen = c(90, 95, 100),</div><div class="line">Shuxue = c(85,80,90))</div><div class="line">d</div></pre></td></tr></table></figure><h5 id="使用函数data-frame建立数据框。name，Yuwen，Shuxue是建立好之后的数据框d的列名。"><a href="#使用函数data-frame建立数据框。name，Yuwen，Shuxue是建立好之后的数据框d的列名。" class="headerlink" title="使用函数data.frame建立数据框。name，Yuwen，Shuxue是建立好之后的数据框d的列名。"></a>使用函数data.frame建立数据框。name，Yuwen，Shuxue是建立好之后的数据框d的列名。</h5><h5 id="前面介绍了R语言中的最为常见的几种数据结构，差不多可以满足我们后面的需求了。后面再遇到新的东西，我们再介绍。"><a href="#前面介绍了R语言中的最为常见的几种数据结构，差不多可以满足我们后面的需求了。后面再遇到新的东西，我们再介绍。" class="headerlink" title="前面介绍了R语言中的最为常见的几种数据结构，差不多可以满足我们后面的需求了。后面再遇到新的东西，我们再介绍。"></a>前面介绍了R语言中的最为常见的几种数据结构，差不多可以满足我们后面的需求了。后面再遇到新的东西，我们再介绍。</h5><h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h3><h5 id="和其他语言一样，函数是R语言中的战斗机。和数学概念一样，y-f-x-，也就是输入变量x，然后经过函数f的处理，得到结果y。"><a href="#和其他语言一样，函数是R语言中的战斗机。和数学概念一样，y-f-x-，也就是输入变量x，然后经过函数f的处理，得到结果y。" class="headerlink" title="和其他语言一样，函数是R语言中的战斗机。和数学概念一样，y = f(x)，也就是输入变量x，然后经过函数f的处理，得到结果y。"></a>和其他语言一样，函数是R语言中的战斗机。和数学概念一样，y = f(x)，也就是输入变量x，然后经过函数f的处理，得到结果y。</h5><h5 id="函数也是一个对象，比如："><a href="#函数也是一个对象，比如：" class="headerlink" title="函数也是一个对象，比如："></a>函数也是一个对象，比如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun &lt;- function(a, b) &#123;</div><div class="line">a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="fun就是一个最为简单的函数。他要做的就是把a和b加起来，输出a和b之和。在这里面，a和b是形参（形式参数），不是具体的参数。只是用来把位置占起来。那么我们使用fun来做一个简单的计算："><a href="#fun就是一个最为简单的函数。他要做的就是把a和b加起来，输出a和b之和。在这里面，a和b是形参（形式参数），不是具体的参数。只是用来把位置占起来。那么我们使用fun来做一个简单的计算：" class="headerlink" title="fun就是一个最为简单的函数。他要做的就是把a和b加起来，输出a和b之和。在这里面，a和b是形参（形式参数），不是具体的参数。只是用来把位置占起来。那么我们使用fun来做一个简单的计算："></a>fun就是一个最为简单的函数。他要做的就是把a和b加起来，输出a和b之和。在这里面，a和b是形参（形式参数），不是具体的参数。只是用来把位置占起来。那么我们使用fun来做一个简单的计算：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun(1,2)</div></pre></td></tr></table></figure><h5 id="这时候1和2就是实参（实际参数），也就是把1和2带进去，计算1和2的和。很多函数（也就是功能）都是别人已经写好的，比如求和sum，求根sqrt等等。-函数写好之后，很多都在不同的包（package）中，下面就介绍一下R语言中的包。"><a href="#这时候1和2就是实参（实际参数），也就是把1和2带进去，计算1和2的和。很多函数（也就是功能）都是别人已经写好的，比如求和sum，求根sqrt等等。-函数写好之后，很多都在不同的包（package）中，下面就介绍一下R语言中的包。" class="headerlink" title="这时候1和2就是实参（实际参数），也就是把1和2带进去，计算1和2的和。很多函数（也就是功能）都是别人已经写好的，比如求和sum，求根sqrt等等。 函数写好之后，很多都在不同的包（package）中，下面就介绍一下R语言中的包。"></a>这时候1和2就是实参（实际参数），也就是把1和2带进去，计算1和2的和。很多函数（也就是功能）都是别人已经写好的，比如求和sum，求根sqrt等等。 函数写好之后，很多都在不同的包（package）中，下面就介绍一下R语言中的包。</h5><h3 id="3-包（package）"><a href="#3-包（package）" class="headerlink" title="3. 包（package）"></a>3. 包（package）</h3><h5 id="R包，类似C、Python中库的概念，指包含特定领域的函数、数据、文档等的集合。通过调用包，可以直接使用包中现成的数据、函数等，使开发方便快捷高效。"><a href="#R包，类似C、Python中库的概念，指包含特定领域的函数、数据、文档等的集合。通过调用包，可以直接使用包中现成的数据、函数等，使开发方便快捷高效。" class="headerlink" title="R包，类似C、Python中库的概念，指包含特定领域的函数、数据、文档等的集合。通过调用包，可以直接使用包中现成的数据、函数等，使开发方便快捷高效。"></a>R包，类似C、Python中库的概念，指包含特定领域的函数、数据、文档等的集合。通过调用包，可以直接使用包中现成的数据、函数等，使开发方便快捷高效。</h5><ul><li>R的强大在于包含了各种各样的包，使用包非常有利于便捷开发。</li><li>一些功能在现有的包中并不存在，需要自己实现，实现后通过打包方便代码的复用。</li><li>每个包涵括一个领域相关的函数数据文档等，通过包可以有效地组织代码结构，有利于开发。</li></ul><h5 id="在R中，所有的函数都是封装好，放在包中的，包是R语言互相交流的最好方法。下面简单介绍一下包的安装，使用，等我们后面会介绍怎么创建，分享自己的R包。"><a href="#在R中，所有的函数都是封装好，放在包中的，包是R语言互相交流的最好方法。下面简单介绍一下包的安装，使用，等我们后面会介绍怎么创建，分享自己的R包。" class="headerlink" title="在R中，所有的函数都是封装好，放在包中的，包是R语言互相交流的最好方法。下面简单介绍一下包的安装，使用，等我们后面会介绍怎么创建，分享自己的R包。"></a>在R中，所有的函数都是封装好，放在包中的，包是R语言互相交流的最好方法。下面简单介绍一下包的安装，使用，等我们后面会介绍怎么创建，分享自己的R包。</h5><h4 id="如何找到自己的需要的R包"><a href="#如何找到自己的需要的R包" class="headerlink" title="如何找到自己的需要的R包"></a>如何找到自己的需要的R包</h4><h5 id="大家要相信很多方法都已经是存在的了，所以你能想到的功能，很多已经被别人做过了，已经有了现成的工具可以使用，也就是R包。因此，如果想实现一个功能，首先要想到的就是是不是已经存在了这样的工具，而不是自己去写。那么如何找到自己所需要的R包呢，这时候就得靠搜索引擎了（谷歌一下，你就知道）。当然，在我大天朝，谷歌早已经404了，如果你能够使用，或者能够翻墙接触到这个万恶的网站，那是最好的，如果不行，那就用必应（必应内心OS：终于想我到了啊。。。），最次，使用百度（百度：嗯？）。"><a href="#大家要相信很多方法都已经是存在的了，所以你能想到的功能，很多已经被别人做过了，已经有了现成的工具可以使用，也就是R包。因此，如果想实现一个功能，首先要想到的就是是不是已经存在了这样的工具，而不是自己去写。那么如何找到自己所需要的R包呢，这时候就得靠搜索引擎了（谷歌一下，你就知道）。当然，在我大天朝，谷歌早已经404了，如果你能够使用，或者能够翻墙接触到这个万恶的网站，那是最好的，如果不行，那就用必应（必应内心OS：终于想我到了啊。。。），最次，使用百度（百度：嗯？）。" class="headerlink" title="大家要相信很多方法都已经是存在的了，所以你能想到的功能，很多已经被别人做过了，已经有了现成的工具可以使用，也就是R包。因此，如果想实现一个功能，首先要想到的就是是不是已经存在了这样的工具，而不是自己去写。那么如何找到自己所需要的R包呢，这时候就得靠搜索引擎了（谷歌一下，你就知道）。当然，在我大天朝，谷歌早已经404了，如果你能够使用，或者能够翻墙接触到这个万恶的网站，那是最好的，如果不行，那就用必应（必应内心OS：终于想我到了啊。。。），最次，使用百度（百度：嗯？）。"></a>大家要相信很多方法都已经是存在的了，所以你能想到的功能，很多已经被别人做过了，已经有了现成的工具可以使用，也就是R包。因此，如果想实现一个功能，首先要想到的就是是不是已经存在了这样的工具，而不是自己去写。那么如何找到自己所需要的R包呢，这时候就得靠搜索引擎了（谷歌一下，你就知道）。当然，在我大天朝，谷歌早已经404了，如果你能够使用，或者能够<del>翻墙</del>接触到这个万恶的网站，那是最好的，如果不行，那就用必应（必应内心OS：终于想我到了啊。。。），最次，使用百度（百度：嗯？）。</h5><h4 id="如何安装R包"><a href="#如何安装R包" class="headerlink" title="如何安装R包"></a>如何安装R包</h4><h5 id="R包一般会公开在三个地方："><a href="#R包一般会公开在三个地方：" class="headerlink" title="R包一般会公开在三个地方："></a>R包一般会公开在三个地方：</h5><ul><li>CRAN：The Comprehensive R Archive Network，这是R core team的R包官方存放地方。安装放在这些的R的网址是<a href="https://mirrors.tongji.edu.cn/CRAN/" target="_blank" rel="external">https://mirrors.tongji.edu.cn/CRAN/</a>，怎么安装这些包呢？使用下面代码即可：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">install.packages(&quot;package.name&quot;)#将package.name替换为自己的要安装的包的名字即可。</div></pre></td></tr></table></figure><ul><li>Bioconductor：这个是大部分的生信相关的包存放的地方，网址<a href="https://www.bioconductor.org/" target="_blank" rel="external">https://www.bioconductor.org/</a>，安装使用代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## try http:// if https:// URLs are not supported</div><div class="line">source(&quot;https://bioconductor.org/biocLite.R&quot;)</div><div class="line">biocLite(&quot;package.name&quot;)#将package.name替换为自己的要安装的包的名字即可。</div></pre></td></tr></table></figure><ul><li>Github：CRAN和bioconductor都需要经过一定的审核，才可以发布，因此另外一个最为常用的代码托管网站，<a href="https://github.com/" target="_blank" rel="external">github</a>，就更为常用友好了，只要把自己写的代码和包放在github上，就可以安装R包了。安装github上的R包，需要使用到R语言大神<a href="http://hadley.nz/" target="_blank" rel="external">Hadley Wickham</a>写的包，devtools了。因此，首选需要安装这个包，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">install.packages(&quot;devtools&quot;)</div><div class="line">library(devtools)</div><div class="line">install_github(&quot;user.name/package.name&quot;)#其中user.name是github作者的用户名。</div></pre></td></tr></table></figure><h4 id="如何获得R包及函数的帮助文档"><a href="#如何获得R包及函数的帮助文档" class="headerlink" title="如何获得R包及函数的帮助文档"></a>如何获得R包及函数的帮助文档</h4><h5 id="安装包之后，如要观察这个包里面所有的函数，以及这个R的说明，比如对于我们刚才安装的sxtTools这个包。我们就可以使用下面代码看这个包里面都含有哪些函数："><a href="#安装包之后，如要观察这个包里面所有的函数，以及这个R的说明，比如对于我们刚才安装的sxtTools这个包。我们就可以使用下面代码看这个包里面都含有哪些函数：" class="headerlink" title="安装包之后，如要观察这个包里面所有的函数，以及这个R的说明，比如对于我们刚才安装的sxtTools这个包。我们就可以使用下面代码看这个包里面都含有哪些函数："></a>安装包之后，如要观察这个包里面所有的函数，以及这个R的说明，比如对于我们刚才安装的sxtTools这个包。我们就可以使用下面代码看这个包里面都含有哪些函数：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">help(package = &quot;sxtTools&quot;)</div></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/65076dda883d93a792dc64163dec905a/xmlnote/222CB5AF6D0044E4B1C5B4C78C2FE30B/18919" alt=""></p><h5 id="如果想看某个具体的函数的信息，可以使用下面的代码："><a href="#如果想看某个具体的函数的信息，可以使用下面的代码：" class="headerlink" title="如果想看某个具体的函数的信息，可以使用下面的代码："></a>如果想看某个具体的函数的信息，可以使用下面的代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?installBioc</div></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/65076dda883d93a792dc64163dec905a/xmlnote/6C773E8B327C4138B564EC9294D3B4C3/18924" alt=""></p><h5 id="每个函数都有详细的说明，可以通过看这些详细的官方文档来学习怎么使用，如果想更便捷，那就直接上"><a href="#每个函数都有详细的说明，可以通过看这些详细的官方文档来学习怎么使用，如果想更便捷，那就直接上" class="headerlink" title="每个函数都有详细的说明，可以通过看这些详细的官方文档来学习怎么使用，如果想更便捷，那就直接上"></a>每个函数都有详细的说明，可以通过看这些详细的官方文档来学习怎么使用，如果想更便捷，那就直接上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">#### 下期预告</div><div class="line"></div><div class="line">##### 下期我们开始学习怎么读取，输出数据，敬请期待</div></pre></td></tr></table></figure></h5><h4 id="PS：所有的代码，都放在了我的github上，大家猛戳阅读原文获得代码"><a href="#PS：所有的代码，都放在了我的github上，大家猛戳阅读原文获得代码" class="headerlink" title="PS：所有的代码，都放在了我的github上，大家猛戳阅读原文获得代码"></a>PS：所有的代码，都放在了我的github上，大家猛戳<strong>阅读原文</strong>获得代码</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，否则你将浪费人生中的十分钟。。。&quot;&gt;&lt;a href=&quot;#这篇文章开始介绍R的基本知识，来让初步学习R语言的同学们能够快速入门。已经入门的同学请略过本文，否则你将浪费人生
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R语言" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/tags/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
      <category term="R语言" scheme="http://yoursite.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Rstudio的使用</title>
    <link href="http://yoursite.com/2018/06/03/R-study1/"/>
    <id>http://yoursite.com/2018/06/03/R-study1/</id>
    <published>2018-06-03T14:37:47.000Z</published>
    <updated>2018-06-03T14:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要做标准化"><a href="#为什么要做标准化" class="headerlink" title="为什么要做标准化"></a>为什么要做标准化</h3><p>基于质谱的代谢组学数据由于各种因素，比如质谱信号漂移，色谱柱污染，等等，会导致采集的数据有很多的系统误差存在，这些系统误差如果不去除掉，会严重影响数据质量，并进而影响从数据中挖掘有效信息的能力。比如下面图就分别显示了批次内（intra-batch）以及批次间（inter-batch）的系统误差，可以看到系统误差还是非常严重和明显的。因此对于质谱代谢组学数据来说，数据的标准化（data normalization）是必不可少的一步。</p><p><img src="intra and inter batch variation.png" alt="批次内和批次间误差"></p><h3 id="代谢组学数据标准化的方法"><a href="#代谢组学数据标准化的方法" class="headerlink" title="代谢组学数据标准化的方法"></a>代谢组学数据标准化的方法</h3><p>代谢组学数据进行标准化的方法大致可以分为三种。</p><ul><li>内标标准化：在样品中加入内标，然后对所有的峰都使用该内标进行校正。但是这种方法使用一个或者几个内标对所有的峰进行标准哈，并不可靠，因此用的不多。</li><li>基于样品本身：比如使用样品中所有峰的平均值、中位值或者总和对所有峰进行校正。另外还有比如PQN等等方法。</li><li>第三种在代谢组学数据中最为常见的标准化方法是基于QC（质量控制）样本的数据标准化。简单来说，就是将所要采集的所有样本取等量混合起来，组成QC样本，然后在采集数据的时候，每隔一定数量的样品，插入一针QC样本。因为QC样本都是一样的，因此可以用QC样本来模拟数据采集过程中信号的变化。得到数据之后，对每一个峰（peak），都将QC作为训练集，然后建立预测模型，预测信号变化，从而对样品中的信号进行校正。</li></ul><p><img src="QC sample.png" alt="QC样品"></p><p><img src="workflow.png" alt="QC normalization workflow"></p><h3 id="基于QC和支持向量机的数据标准化R包：MetNormalizer"><a href="#基于QC和支持向量机的数据标准化R包：MetNormalizer" class="headerlink" title="基于QC和支持向量机的数据标准化R包：MetNormalizer"></a>基于QC和支持向量机的数据标准化R包：MetNormalizer</h3><p>我再读博期间的第一个项目就是建立一个基于QC样品的数据标准化方法，我们最后选择了一个非常有用并且常用的机器学习方法，SVR（支持向量机回归），最后的方法我们做成了一个R包，MetNormalizer。具体的内容可以参考我的文章，<a href="http://ow5z7hup5.bkt.clouddn.com/2016%20Metabolomics%20MetNormalizer.pdf" target="_blank" rel="external">Normalization and Integration of Large-Scale Metabolomics Data Using Support Vector Regression</a>。下面就用MetNormalizer自带的示例数据示范如何使用。</p><ul><li><p>安装MetNormalizer<br>MetNormalizer的源代码托管在github上，可以直接从github安装。在R控制台中输入下列代码，进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(!require(devtools))&#123;</div><div class="line">install.packages(&quot;devtools&quot;)</div><div class="line">&#125;</div><div class="line">devtools::install_github(&quot;jaspershen/MetNormalizer&quot;)</div></pre></td></tr></table></figure></li><li><p>准备数据<br>以MetNormalizer自带数据为例。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#首先加载MetNormalizer包</div><div class="line">library(MetNormalizer)</div><div class="line">#设置工作路径</div><div class="line">setwd(&quot;F:/test&quot;)#根据自己实际情况设置路径</div><div class="line">data(DemoData, package = &quot;MetNormalizer&quot;)</div><div class="line">#输出数据为csv格式</div><div class="line">write.csv(data, &quot;data.csv&quot;, row.names = FALSE)</div><div class="line">write.csv(sample.info, &quot;sample.info.csv&quot;, row.names = FALSE)</div></pre></td></tr></table></figure><p>其中data为MS1 peak table，可以来源于任何的处理软件，如XCMS，MS-DIAL等。注意前三列必须为name(峰的名字)，m/z和RT。然后其他列为样本的intensity。</p><p><img src="data.png" alt="data"></p><p>sample.info为样品信息，用来提供样品的信息。一共三列，第一列sample.name(样品名字)，然后依次是injection.order和class。class用来指明样品的种类，”Subject”说明该样品为生物样品，注意S要大写；QC是指样品为QC样品。</p><p><img src="sample.info.png" alt="data"></p><ul><li>开始处理数据<br>然后开始运行函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MetNormalizer(minfrac.qc = 0,</div><div class="line">              minfrac.sample = 0,</div><div class="line">              threads = 3,</div><div class="line">              peakplot = TRUE)</div></pre></td></tr></table></figure><ul><li>处理结果</li></ul><p>最后所有的处理结果都存放在<em>svr normalization result</em>文件夹中。</p><p><img src="result.png" alt="result"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要做标准化&quot;&gt;&lt;a href=&quot;#为什么要做标准化&quot; class=&quot;headerlink&quot; title=&quot;为什么要做标准化&quot;&gt;&lt;/a&gt;为什么要做标准化&lt;/h3&gt;&lt;p&gt;基于质谱的代谢组学数据由于各种因素，比如质谱信号漂移，色谱柱污染，等等，会导致采集的数据有很
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R语言" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/tags/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
      <category term="R语言" scheme="http://yoursite.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>使用R语言下载KEGG数据库</title>
    <link href="http://yoursite.com/2018/06/03/20180827-R-KEGG/"/>
    <id>http://yoursite.com/2018/06/03/20180827-R-KEGG/</id>
    <published>2018-06-03T14:37:47.000Z</published>
    <updated>2018-08-27T08:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在群里发现大家经常交流如何下载各种数据库，确实，数据库对做各种组学来说，确实是非常重要的，但是很多数据库的下载做的并不是那么友好。KEGG是我们平时接触最多，以及最受大家欢迎的数据库之一，因此，这次我把一个非常好用的R包，KEGGREST下载KEGG数据库的用法进行了总结。</p><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>KEGGREST包是一个bioconductor包，是由bioconductor的核心小组成员之一，Dan Tenenbaum写的，主要就是用来下载KEGG数据库。链接如下，<a href="https://bioconductor.org/packages/release/bioc/html/KEGGREST.html。" target="_blank" rel="external">https://bioconductor.org/packages/release/bioc/html/KEGGREST.html。</a></p><h4 id="安装KEGGREST"><a href="#安装KEGGREST" class="headerlink" title="安装KEGGREST"></a>安装KEGGREST</h4><p>可以直接使用Bioconductor提供的下载方式进行下载，在R控制面板中输入下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## try http:// if https:// URLs are not supported</div><div class="line">source(&quot;https://bioconductor.org/biocLite.R&quot;)</div><div class="line">biocLite(&quot;KEGGREST&quot;)</div></pre></td></tr></table></figure><p>如果出错，不能安装，可以考虑把https换为http，输入下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">## try http:// if https:// URLs are not supported</div><div class="line">source(&quot;http://bioconductor.org/biocLite.R&quot;)</div><div class="line">biocLite(&quot;KEGGREST&quot;)</div></pre></td></tr></table></figure><p>安装成功之后，就可以使用了。</p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>成功安装之后，这个包有自己的说明文档，输入下列代码可以打开说明文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browseVignettes(&quot;KEGGREST&quot;)</div></pre></td></tr></table></figure><p>文档如下：</p><p><img src="http://note.youdao.com/yws/res/22270/A8AD689E39964E6ABC1247C8B000B46F" alt="image"></p><p>输入下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">library(KEGGREST)</div><div class="line">listDatabases()</div></pre></td></tr></table></figure><p>可以看到该包可以下载的数据类型：</p><p><img src="http://note.youdao.com/yws/res/22276/25A75A1CA92A41188D6A370BCB756EC4" alt="image"></p><p>可以看到KEGG中几乎所有数据库都可以下载下来，我们以我们最为常用的pathway和compound数据为例，来说明如何使用KEGGREST。</p><h4 id="下载pathway信息"><a href="#下载pathway信息" class="headerlink" title="下载pathway信息"></a>下载pathway信息</h4><p>我们知道pathway信息有不同的物种，因此我们首先需要弄清楚有哪些物种，可以使用以下代码获得包含哪些物种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org &lt;- keggList(&quot;organism&quot;)</div><div class="line">head(org)</div></pre></td></tr></table></figure><p><img src="http://note.youdao.com/yws/res/22289/37E2A56668464E4DB7253300397F90F9" alt="image"></p><p>org是一个matrix，其中第三列是各个物种的名字，第二列是各个物种的简称。</p><p>下面我们就来获取人类所有的pathway。</p><p>可以看到人类的简称是hsa。下面再获得人类的所有通路的代码简称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hsa.pathway &lt;- keggLink(&quot;pathway&quot;, &quot;hsa&quot;)</div><div class="line">hsa.pathway &lt;- unique(hsa.pathway)</div></pre></td></tr></table></figure><p><img src="http://note.youdao.com/yws/res/22294/152B7B22AD96490BBC5B1B6AB85179A1" alt="image"></p><p>hsa.pahtway就是所有人类pathway的代码简称。</p><p>然后使用keggGet函数就可以将每个pathway的信息全部爬去下来，比如第一个pathway是：path:hsa00010”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hsa.pathway[1]</div><div class="line">hsa00010 &lt;- keggGet(dbentries = hsa.pathway[1])[[1]]</div></pre></td></tr></table></figure><p>hsa00010是一个list格式的数据，它的内容分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">names(hsa00010)</div></pre></td></tr></table></figure><p><img src="http://note.youdao.com/yws/res/22312/280787566FE4413493DBB2D6DDDDF0AD" alt="image"></p><p>与KEGG网页版的数据是一一对应的。</p><p><img src="http://note.youdao.com/yws/res/22316/62B015FA37234929AAA6BD3C2ABC3B3A" alt="image"></p><p>如果想要得到人类所有KEGG pahtway的信息，则可以使用下列代码得到，以为该函数每次最多只接受10个pathway的下载请求（推测是为了防止KEGG的下载崩溃），因此更为便捷的办法是，循环获得所有的pathway信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hsa.pathway.database &lt;- vector(mode = &quot;list&quot;, length = length(hsa.pathway))</div><div class="line"></div><div class="line">for(i in 1:length(hsa.pathway))&#123;</div><div class="line">  cat(i, &quot; &quot;)</div><div class="line">  hsa.pathway.database[[i]] &lt;- keggGet(dbentries = hsa.pathway[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后可以将得到的信息保存下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">save(hsa.pathway.database, file = &quot;hsa.pathway.database&quot;)</div></pre></td></tr></table></figure><h4 id="下载compound信息"><a href="#下载compound信息" class="headerlink" title="下载compound信息"></a>下载compound信息</h4><p>首先需要获得所有代谢物的ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compound.id &lt;- keggList(&quot;compound&quot;)</div><div class="line">compound.id &lt;- names(compound.id)</div></pre></td></tr></table></figure><p>然后仍然通过keggGet函数获得所有代谢物的详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kegg.compound.database &lt;- vector(mode = &quot;list&quot;, length = length(compound.id))</div><div class="line"></div><div class="line">for(i in 1:length(compound.id))&#123;</div><div class="line">  cat(i, &quot; &quot;)</div><div class="line">  kegg.compound.database[[i]] &lt;- keggGet(dbentries = compound.id[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>得到的kegg.compound.database也是一个list数据，如果想要将其转换为datafrmae格式，然后输出位csv或者xlsx格式，自己进行转换即可。</p><h4 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h4><p>这个包用来下载KEGG数据库真的是非常方便，以前用过，后来忘掉了，最近又找出来，为了防止自己忘掉，所以写了一篇文章来记录一下，其他的功能后面会再研究记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在群里发现大家经常交流如何下载各种数据库，确实，数据库对做各种组学来说，确实是非常重要的，但是很多数据库的下载做的并不是那么友好。KEGG是我们平时接触最多，以及最受大家欢迎的数据库之一，因此，这次我把一个非常好用的R包，KEGGREST下载KEGG数据库的用法进行了总
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R语言" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/categories/Chinese/R%E8%AF%AD%E8%A8%80/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="组学基础" scheme="http://yoursite.com/tags/%E7%BB%84%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
      <category term="R语言" scheme="http://yoursite.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>代谢组数据标准化包MetNormalizer介绍</title>
    <link href="http://yoursite.com/2018/05/16/metabolomics-data-normalization/"/>
    <id>http://yoursite.com/2018/05/16/metabolomics-data-normalization/</id>
    <published>2018-05-16T10:48:28.000Z</published>
    <updated>2018-05-16T14:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要做标准化"><a href="#为什么要做标准化" class="headerlink" title="为什么要做标准化"></a>为什么要做标准化</h3><p>基于质谱的代谢组学数据由于各种因素，比如质谱信号漂移，色谱柱污染，等等，会导致采集的数据有很多的系统误差存在，这些系统误差如果不去除掉，会严重影响数据质量，并进而影响从数据中挖掘有效信息的能力。比如下面图就分别显示了批次内（intra-batch）以及批次间（inter-batch）的系统误差，可以看到系统误差还是非常严重和明显的。因此对于质谱代谢组学数据来说，数据的标准化（data normalization）是必不可少的一步。</p><p><img src="intra and inter batch variation.png" alt="批次内和批次间误差"></p><h3 id="代谢组学数据标准化的方法"><a href="#代谢组学数据标准化的方法" class="headerlink" title="代谢组学数据标准化的方法"></a>代谢组学数据标准化的方法</h3><p>代谢组学数据进行标准化的方法大致可以分为三种。</p><ul><li>内标标准化：在样品中加入内标，然后对所有的峰都使用该内标进行校正。但是这种方法使用一个或者几个内标对所有的峰进行标准哈，并不可靠，因此用的不多。</li><li>基于样品本身：比如使用样品中所有峰的平均值、中位值或者总和对所有峰进行校正。另外还有比如PQN等等方法。</li><li>第三种在代谢组学数据中最为常见的标准化方法是基于QC（质量控制）样本的数据标准化。简单来说，就是将所要采集的所有样本取等量混合起来，组成QC样本，然后在采集数据的时候，每隔一定数量的样品，插入一针QC样本。因为QC样本都是一样的，因此可以用QC样本来模拟数据采集过程中信号的变化。得到数据之后，对每一个峰（peak），都将QC作为训练集，然后建立预测模型，预测信号变化，从而对样品中的信号进行校正。</li></ul><p><img src="QC sample.png" alt="QC样品"></p><p><img src="workflow.png" alt="QC normalization workflow"></p><h3 id="基于QC和支持向量机的数据标准化R包：MetNormalizer"><a href="#基于QC和支持向量机的数据标准化R包：MetNormalizer" class="headerlink" title="基于QC和支持向量机的数据标准化R包：MetNormalizer"></a>基于QC和支持向量机的数据标准化R包：MetNormalizer</h3><p>我再读博期间的第一个项目就是建立一个基于QC样品的数据标准化方法，我们最后选择了一个非常有用并且常用的机器学习方法，SVR（支持向量机回归），最后的方法我们做成了一个R包，MetNormalizer。具体的内容可以参考我的文章，<a href="http://ow5z7hup5.bkt.clouddn.com/2016%20Metabolomics%20MetNormalizer.pdf" target="_blank" rel="external">Normalization and Integration of Large-Scale Metabolomics Data Using Support Vector Regression</a>。下面就用MetNormalizer自带的示例数据示范如何使用。</p><ul><li><p>安装MetNormalizer<br>MetNormalizer的源代码托管在github上，可以直接从github安装。在R控制台中输入下列代码，进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(!require(devtools))&#123;</div><div class="line">install.packages(&quot;devtools&quot;)</div><div class="line">&#125;</div><div class="line">devtools::install_github(&quot;jaspershen/MetNormalizer&quot;)</div></pre></td></tr></table></figure></li><li><p>准备数据<br>以MetNormalizer自带数据为例。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#首先加载MetNormalizer包</div><div class="line">library(MetNormalizer)</div><div class="line">#设置工作路径</div><div class="line">setwd(&quot;F:/test&quot;)#根据自己实际情况设置路径</div><div class="line">data(DemoData, package = &quot;MetNormalizer&quot;)</div><div class="line">#输出数据为csv格式</div><div class="line">write.csv(data, &quot;data.csv&quot;, row.names = FALSE)</div><div class="line">write.csv(sample.info, &quot;sample.info.csv&quot;, row.names = FALSE)</div></pre></td></tr></table></figure><p>其中data为MS1 peak table，可以来源于任何的处理软件，如XCMS，MS-DIAL等。注意前三列必须为name(峰的名字)，m/z和RT。然后其他列为样本的intensity。</p><p><img src="data.png" alt="data"></p><p>sample.info为样品信息，用来提供样品的信息。一共三列，第一列sample.name(样品名字)，然后依次是injection.order和class。class用来指明样品的种类，”Subject”说明该样品为生物样品，注意S要大写；QC是指样品为QC样品。</p><p><img src="sample.info.png" alt="data"></p><ul><li>开始处理数据<br>然后开始运行函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MetNormalizer(minfrac.qc = 0,</div><div class="line">              minfrac.sample = 0,</div><div class="line">              threads = 3,</div><div class="line">              peakplot = TRUE)</div></pre></td></tr></table></figure><ul><li>处理结果</li></ul><p>最后所有的处理结果都存放在<em>svr normalization result</em>文件夹中。</p><p><img src="result.png" alt="result"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要做标准化&quot;&gt;&lt;a href=&quot;#为什么要做标准化&quot; class=&quot;headerlink&quot; title=&quot;为什么要做标准化&quot;&gt;&lt;/a&gt;为什么要做标准化&lt;/h3&gt;&lt;p&gt;基于质谱的代谢组学数据由于各种因素，比如质谱信号漂移，色谱柱污染，等等，会导致采集的数据有很
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/categories/Chinese/Metabolomics/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/tags/Metabolomics/"/>
    
  </entry>
  
  <entry>
    <title>爬取MassBank数据</title>
    <link href="http://yoursite.com/2018/04/20/2018-04-13-hexo-domain-name/2018-04-13-massbank-database-get/"/>
    <id>http://yoursite.com/2018/04/20/2018-04-13-hexo-domain-name/2018-04-13-massbank-database-get/</id>
    <published>2018-04-20T06:00:13.000Z</published>
    <updated>2018-04-20T06:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用R语言爬去MassBank数据库"><a href="#利用R语言爬去MassBank数据库" class="headerlink" title="利用R语言爬去MassBank数据库"></a><font color="salmon">利用R语言爬去MassBank数据库</font></h3><p>直接把代码记录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">library(rvest)</div><div class="line">url &lt;- &quot;http://www.massbank.jp/SVN/OpenData/record/Athens_Univ/&quot;</div><div class="line">met.id &lt;- read_html(url)</div><div class="line">met.id &lt;- html_text(met.id)</div><div class="line">met.id &lt;- strsplit(x = met.id, split = &quot;\n&quot;)[[1]]</div><div class="line">met.id &lt;- met.id[grep(&quot;.txt&quot;, met.id)]</div><div class="line">met.id &lt;- stringr::str_trim(met.id)</div><div class="line"></div><div class="line"></div><div class="line">athens_univ &lt;- vector(mode = &quot;list&quot;, length = length(met.id))</div><div class="line"></div><div class="line">for(i in 1:length(athens_univ))&#123;</div><div class="line">  cat(i, &quot; &quot;)</div><div class="line">  temp.url &lt;- paste(&quot;http://www.massbank.jp/SVN/OpenData/record/Athens_Univ/&quot;, met.id[i], &quot;/&quot;, sep = &quot;&quot;)</div><div class="line">  met.ms2 &lt;- read_html(temp.url)</div><div class="line">  met.ms2 &lt;- html_text(met.ms2)</div><div class="line">  met.ms2 &lt;- strsplit(x = met.ms2, split = &quot;\r\n&quot;)[[1]]</div><div class="line">  athens_univ[[i]] &lt;- met.ms2</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">names(athens_univ) &lt;- gsub(pattern = &quot;.txt&quot;, replacement = &quot;&quot;, x = met.id)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;利用R语言爬去MassBank数据库&quot;&gt;&lt;a href=&quot;#利用R语言爬去MassBank数据库&quot; class=&quot;headerlink&quot; title=&quot;利用R语言爬去MassBank数据库&quot;&gt;&lt;/a&gt;&lt;font color=&quot;salmon&quot;&gt;利用R语言爬去Mass
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/categories/Chinese/Metabolomics/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/tags/Metabolomics/"/>
    
  </entry>
  
  <entry>
    <title>西雅图之行</title>
    <link href="http://yoursite.com/2018/04/13/2018-06-28-seatlle/"/>
    <id>http://yoursite.com/2018/04/13/2018-06-28-seatlle/</id>
    <published>2018-04-13T01:57:26.000Z</published>
    <updated>2018-06-28T18:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何将Hexo博客绑定自己的域名？"><a href="#如何将Hexo博客绑定自己的域名？" class="headerlink" title="如何将Hexo博客绑定自己的域名？"></a><font color="salmon">如何将Hexo博客绑定自己的域名？</font></h3><p>构建基于Hexo和Github之后的博客之后，默认地址为example@github.io，可以将该博客绑定为自己的域名。比如我的博客地址域名为shenxt.me。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><font color="salmon">购买域名</font></h3><p>我是在<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">godaddy</a>上购买的，一般博客的域名可以使用.me结尾的域名，这个在个人博客上用的非常多。</p><h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a><font color="salmon">域名设置</font></h3><p>购买域名之后，需要对该域名进行设置。在godaddy官网上，点击自己已经购买的域名，如下图所示点击管理DNS。</p><p><img src="域名设置1.png" alt=""></p><p>然后点击添加，分别添加两个记录。第一个记录</p><ul><li>类型为A，名称为@，值为你该博客的IP地址，查询博客地址的IP地址，可以使用该<a href="http://ip.chinaz.com/" target="_blank" rel="external">网站</a>，直接输入博客地址即可，如shenxt.github.io。</li><li>类型为CNAME，名称为www，值为博客地址，如shenxt.guthub.io。</li></ul><p><img src="域名设置2.png" alt=""></p><p>然后保存即可。</p><h3 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a><font color="salmon">博客设置</font></h3><p>在博客本地文件夹source下，新建一个空白文件，CNAME，没有后缀名，然后使用文本打开，输入自己的域名，比如shenxt.me，注意前面不需要任何的前缀。然后关闭。打开终端，像发布新的博客一样进行操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo c</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><font color="salmon">测试</font></h3><p>一般需要稍等一会，然后在浏览器中输入自己的域名，即可打开自己的博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何将Hexo博客绑定自己的域名？&quot;&gt;&lt;a href=&quot;#如何将Hexo博客绑定自己的域名？&quot; class=&quot;headerlink&quot; title=&quot;如何将Hexo博客绑定自己的域名？&quot;&gt;&lt;/a&gt;&lt;font color=&quot;salmon&quot;&gt;如何将Hexo博客绑定自己的
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="博客" scheme="http://yoursite.com/categories/Chinese/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="随记" scheme="http://yoursite.com/categories/Chinese/%E5%8D%9A%E5%AE%A2/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客绑定域名</title>
    <link href="http://yoursite.com/2018/04/13/2018-04-13-hexo-domain-name/"/>
    <id>http://yoursite.com/2018/04/13/2018-04-13-hexo-domain-name/</id>
    <published>2018-04-13T01:57:26.000Z</published>
    <updated>2018-04-13T01:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何将Hexo博客绑定自己的域名？"><a href="#如何将Hexo博客绑定自己的域名？" class="headerlink" title="如何将Hexo博客绑定自己的域名？"></a><font color="salmon">如何将Hexo博客绑定自己的域名？</font></h3><p>构建基于Hexo和Github之后的博客之后，默认地址为example@github.io，可以将该博客绑定为自己的域名。比如我的博客地址域名为shenxt.me。</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a><font color="salmon">购买域名</font></h3><p>我是在<a href="https://sg.godaddy.com/zh/" target="_blank" rel="external">godaddy</a>上购买的，一般博客的域名可以使用.me结尾的域名，这个在个人博客上用的非常多。</p><h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a><font color="salmon">域名设置</font></h3><p>购买域名之后，需要对该域名进行设置。在godaddy官网上，点击自己已经购买的域名，如下图所示点击管理DNS。</p><p><img src="域名设置1.png" alt=""></p><p>然后点击添加，分别添加两个记录。第一个记录</p><ul><li>类型为A，名称为@，值为你该博客的IP地址，查询博客地址的IP地址，可以使用该<a href="http://ip.chinaz.com/" target="_blank" rel="external">网站</a>，直接输入博客地址即可，如shenxt.github.io。</li><li>类型为CNAME，名称为www，值为博客地址，如shenxt.guthub.io。</li></ul><p><img src="域名设置2.png" alt=""></p><p>然后保存即可。</p><h3 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a><font color="salmon">博客设置</font></h3><p>在博客本地文件夹source下，新建一个空白文件，CNAME，没有后缀名，然后使用文本打开，输入自己的域名，比如shenxt.me，注意前面不需要任何的前缀。然后关闭。打开终端，像发布新的博客一样进行操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo c</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><font color="salmon">测试</font></h3><p>一般需要稍等一会，然后在浏览器中输入自己的域名，即可打开自己的博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何将Hexo博客绑定自己的域名？&quot;&gt;&lt;a href=&quot;#如何将Hexo博客绑定自己的域名？&quot; class=&quot;headerlink&quot; title=&quot;如何将Hexo博客绑定自己的域名？&quot;&gt;&lt;/a&gt;&lt;font color=&quot;salmon&quot;&gt;如何将Hexo博客绑定自己的
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R" scheme="http://yoursite.com/categories/Chinese/R/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Chinese/R/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/categories/Chinese/R/Hexo/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>偶然翻到的文章</title>
    <link href="http://yoursite.com/2017/10/09/2017-10-09.poetry/"/>
    <id>http://yoursite.com/2017/10/09/2017-10-09.poetry/</id>
    <published>2017-10-09T07:29:51.000Z</published>
    <updated>2017-10-09T07:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整理笔记的发现"><a href="#整理笔记的发现" class="headerlink" title="整理笔记的发现"></a><font color="salmon">整理笔记的发现</font></h3><p>别人都说翻看以前的空间觉得自己以前写的东西宛若智障，这两天在翻看以前的笔记，也有这种感觉，因此，该删的删，直到看到了这篇文章，是在15年6月26号写的，现在想起来，虽然只有两年多的时间，但是物是人非，恍如隔世啊。这篇正好其实写的还不错，自己以前也是一个文艺青年，所以不舍得删掉，放在博客，充实一下内容。</p><h3 id="谁让我遇到了你"><a href="#谁让我遇到了你" class="headerlink" title="谁让我遇到了你"></a><font color="salmon">谁让我遇到了你</font></h3><p>谁让我遇到了你，<br>在春末夏初，当柳枝恢复了颜色，<br>在花落蝉鸣，那姗姗来迟的雨季。<br>生命一直如此平淡，我也从未期望奇迹，<br>我过着我自己的生活，<br>人生对我来说也许就是密密麻麻的正楷书写的履历，<br>波澜不惊，平淡无奇。<br>时间像流水般流逝，<br>流逝而变化的是我周围的环境，呼吸以及空气，<br>沉寂的是我自己，看似乐观的外表，其实内心的孤寂，<br>没有人会在意我的在意，<br>直到我遇到了你，<br>在那个我也记不清的独特而不浪漫的某个时刻的某个过去。<br>从此我的脑海里便有了挥散不去的，<br>让我回想的你的笑容，你的身影，以及，<br>你并不夸张而又足够吸引我的的气息。<br>我对你的爱，不知怎么形容，<br>也许你会觉得俗气：不变专一。<br>此情难抑，<br>如荷塘蜻蜓戏水，随波而散的青色涟漪，<br>像我手中的铅笔，涂画在围城上的白色封皮。<br>不知你是否还记得，<br>我总是小心翼翼，<br>而你总是不睬不理，<br>当然我知道的，这不是你的心意，<br>正像你说的，我没有飞蛾的勇气，<br>也不像叶芝那样，完全的放开自己。<br>你知道我的心里，<br>容不下别人，此爱唯你。<br>我知道随着岁月的流去，<br>你会看到如今挂在我口上的，<br>也的的确确刻在我心中的那句：不离不弃。<br>直到有一天，当我老了，牙齿脱落，四肢无力，<br>我也会坚守着对你的爱，<br>用尽最后一丝力气，<br>我甚至可以想象有一天，<br>当我魂归天际，<br>藏在我心中的，除了此生我从未改变的对父母家人的爱，<br>便是独一无二的，在未来的昨天我遇到的你<br>谁让我遇到了你，<br>窗外的秋雨拍打着五颜六色的雨伞，<br>也像一个声音的到来打断了我的思绪，<br>或许这就是命中注定，或许这就是天意，<br>我不知道我为什么爱你，<br>就像我不知道我为什么不爱你。<br>感觉就是这么奇妙的难以，<br>难以用话语，难以用铅笔，<br>勾勒出色彩斑斓的奇妙的爱的境地。<br>谁让我遇到了你<br>是缘分，抑或是机遇，<br>缘分是什么？<br>是你我虽然并未见到过的上帝，<br>他也许偶然在做高数题，<br>而他给出的答案就是随机，<br>随机抽取，<br>在未来的日子里我们需要互相珍惜，<br>珍惜这段来之不易的，<br>上帝赋予我们的非同一般的意义。</p>]]></content>
    
    <summary type="html">
    
      整理笔记时偶然翻到前几年写的东西
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="Life" scheme="http://yoursite.com/categories/Chinese/Life/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
  </entry>
  
  <entry>
    <title>R管道函数</title>
    <link href="http://yoursite.com/2017/10/09/2017-10-11.pipline.function/"/>
    <id>http://yoursite.com/2017/10/09/2017-10-11.pipline.function/</id>
    <published>2017-10-09T07:29:51.000Z</published>
    <updated>2017-10-11T14:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="R中的管道函数"><a href="#R中的管道函数" class="headerlink" title="R中的管道函数"></a><font color="salmon">R中的管道函数</font></h3><p>管道函数是R语言中为了减少过多使用中间变量而创建的，R语言本身没有没有自带管道函数，第三方包中提供了管道函数的使用，我使用的是<a href="https://cran.r-project.org/web/packages/stringr/index.html" target="_blank" rel="external">stringr</a>包。以前不怎么使用，现在开始试着使用管道函数，因为可以使代码更加简洁，并且节省内存空间。下面以一个小的例子来进行说明，这个例子是从<a href="http://mp.weixin.qq.com/s/uKSIAg1kEIj0dDqnVTdYvA" target="_blank" rel="external">别人那拷贝而来</a>。</p><h3 id="如何使用管道函数"><a href="#如何使用管道函数" class="headerlink" title="如何使用管道函数"></a><font color="salmon">如何使用管道函数</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">library(&quot;rvest&quot;)</div><div class="line">library(&quot;stringr&quot;)</div><div class="line">url&lt;- &quot;http://www.zyzw.com/twzs010.htm&quot;</div></pre></td></tr></table></figure><p>在不久前的一篇关于中国世界文遗产仪表盘的案例中，我在目标网站上抓取了52个中国世界自然文遗产的名称。按照传统的引入中间变量的写法，代码应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">web&lt;-read_html(url,encoding=&quot;GBK&quot;)</div><div class="line">web1&lt;-html_nodes(web,&quot;b&quot;)</div><div class="line">content1&lt;-html_text(web1,trim = FALSE)</div><div class="line">content2&lt;-gsub(&quot;(\\n\\t|，|\\d|、)&quot;,&quot;&quot;,content1)</div><div class="line">content3&lt;-grep(&quot;\\S&quot;,content2,value=T)</div><div class="line">content4&lt;-str_trim(content3,side=&quot;both&quot;)</div><div class="line">content5&lt;-content4[1:54]</div><div class="line">content6&lt;-content5[setdiff(1:54,c(35,39))];content6</div></pre></td></tr></table></figure><p><img src="http://ow5z7hup5.bkt.clouddn.com/20171011piplineFunction.fig1.png" width="600" class="img-topic"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;R中的管道函数&quot;&gt;&lt;a href=&quot;#R中的管道函数&quot; class=&quot;headerlink&quot; title=&quot;R中的管道函数&quot;&gt;&lt;/a&gt;&lt;font color=&quot;salmon&quot;&gt;R中的管道函数&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;管道函数是R语言中为了减少过多使用中间变量而
      
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="R" scheme="http://yoursite.com/categories/Chinese/R/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>鄂尔多斯之旅</title>
    <link href="http://yoursite.com/2017/10/04/2017-10-03.in.erdos/"/>
    <id>http://yoursite.com/2017/10/04/2017-10-03.in.erdos/</id>
    <published>2017-10-04T00:41:14.000Z</published>
    <updated>2017-10-05T01:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重返内蒙"><a href="#重返内蒙" class="headerlink" title="重返内蒙"></a>重返内蒙</h3><p>虽然在呼和浩特待了四年的时间，度过了自己的大学生活，但是对内蒙古和呼市的了解却非常的匮乏，也仅仅限于内蒙古大学周围的那片区域。毕业已经四年多了，博士都快毕业了，但是自从毕业之后还没有到过内蒙来。终于趁着这个十一，回到了内蒙，当刚下飞机的那一刻，看到汉蒙双文的招牌，思维一下子就回到了在内大读书的时候。</p><h3 id="第一次到鄂尔多斯"><a href="#第一次到鄂尔多斯" class="headerlink" title="第一次到鄂尔多斯"></a>第一次到鄂尔多斯</h3><p>第一次看到传说中的鄂尔多斯，第一次看到准格尔旗，确实不愧是中国百强县，显得很繁华，比地处中原腹地的卫辉好多了。卫辉曾经的辉煌也只在四五百年前了。如今更像一个破败的小城，找不到任何发展的生机和希望。不知道未来委会人民能否找到适合自己的发展方向和产业。卫辉当然也有很多优势，比如交通，地理位置等等。</p><h3 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h3><p>大学期间就知道内蒙人民喜欢喝酒，也确实酒量很好。但是因为当时在上学，喝酒的机会不是很多，但是这次来到鄂尔多斯之后，很多场合都需要喝酒，才发现大家的热情喝酒量真的是非常的好，另外就是对自己也有一个新的认识，我也是可以喝酒的，原来我对白酒真的是低酒不沾，而且觉得白酒除了辣之外，真的是没有任何的特点，没有任何好喝的一点，但是自从上次喝了半瓶白酒之后，醉的一塌糊涂，到现在为止，已经将近一年半的时间了，没有再喝过白酒，不过这次，感觉也还好，自己也还挺能喝，喝了不少，没有醉，对自己的酒量有了新的认识，只是毕竟酒不是什么好东西，以后，除了在一些必须的场合，其他时候，还是不要喝酒了。和内蒙的朋友们在一起真的很高兴，大家的热情也感染了我，希望以后每年都有机会回到这来，和大家里聊天，喝酒。</p>]]></content>
    
    <summary type="html">
    
      时隔四年再次回到内蒙古，但是却是第一次到鄂尔多斯。
    
    </summary>
    
      <category term="Chinese" scheme="http://yoursite.com/categories/Chinese/"/>
    
      <category term="Life" scheme="http://yoursite.com/categories/Chinese/Life/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
  </entry>
  
  <entry>
    <title>MetDNA instruction</title>
    <link href="http://yoursite.com/2017/09/09/2017-09-09-metdna-blog/"/>
    <id>http://yoursite.com/2017/09/09/2017-09-09-metdna-blog/</id>
    <published>2017-09-09T14:41:57.000Z</published>
    <updated>2017-10-18T09:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oy0flpoi6.bkt.clouddn.com/logo.png" class="img-topic" width="800" align="middle"></p><p></p><h1><strong>Instruction of MetDNA (version 0.99.11)</strong></h1><p></p><h3><strong>Xiaotao Shen, Zhengjiang Zhu</strong></h3><hr><h3 id="问题报告"><a href="#问题报告" class="headerlink" title="问题报告"></a><strong><font color="red">问题报告</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> <font color="red">如果有任何问题出现，请点击<a href="http://shenxt.me/2017/09/09/2017-09-09-metdna-blog/" target="_blank" rel="external">此处</a>给我留言。留言要包括下面三个部分：</font> </p> </h4><ul><li><h4 id="处理文件地址；"><a href="#处理文件地址；" class="headerlink" title="处理文件地址；"></a><font color="red">处理文件地址；</font></h4></li><li><h4 id="运行的代码截图；"><a href="#运行的代码截图；" class="headerlink" title="运行的代码截图；"></a><font color="red">运行的代码截图；</font></h4></li><li><h4 id="出现问题的报错信息截图。"><a href="#出现问题的报错信息截图。" class="headerlink" title="出现问题的报错信息截图。"></a><font color="red">出现问题的报错信息截图。</font></h4></li></ul><h3 id="常见错误总结"><a href="#常见错误总结" class="headerlink" title="常见错误总结"></a><strong><font color="red">常见错误总结</font></strong></h3><ul><li><h4> <p style="line-height: 1.5em;" align="justify">数据存放文件夹必须命名为POS或者NEG。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify">sample.info的两列列名必须是sample.name和group。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify">如果有正负离子模式数据，必须保证正负离子模式的样品名完全相同。</p> </h4></li></ul><hr><h3 id="MetDNA处理步骤"><a href="#MetDNA处理步骤" class="headerlink" title="MetDNA处理步骤"></a><strong><font color="lightseagreen">MetDNA处理步骤</font></strong></h3><h4 id="MetDNA一共处理过程一共分为了以下几个步骤："><a href="#MetDNA一共处理过程一共分为了以下几个步骤：" class="headerlink" title="MetDNA一共处理过程一共分为了以下几个步骤："></a>MetDNA一共处理过程一共分为了以下几个步骤：</h4><ul><li><h4 id="数据检查；"><a href="#数据检查；" class="headerlink" title="数据检查；"></a>数据检查；</h4></li><li><h4 id="二级谱图匹配：使用标准二级谱图数据库进行鉴定；"><a href="#二级谱图匹配：使用标准二级谱图数据库进行鉴定；" class="headerlink" title="二级谱图匹配：使用标准二级谱图数据库进行鉴定；"></a>二级谱图匹配：使用标准二级谱图数据库进行鉴定；</h4></li><li><h4 id="基于代谢反应网络的代谢物鉴定；"><a href="#基于代谢反应网络的代谢物鉴定；" class="headerlink" title="基于代谢反应网络的代谢物鉴定；"></a>基于代谢反应网络的代谢物鉴定；</h4></li><li><h4 id="紊乱网络分析；"><a href="#紊乱网络分析；" class="headerlink" title="紊乱网络分析；"></a>紊乱网络分析；</h4></li><li><h4 id="生成分析报告。"><a href="#生成分析报告。" class="headerlink" title="生成分析报告。"></a>生成分析报告。</h4></li></ul><hr><h3 id="Ⅰ数据准备"><a href="#Ⅰ数据准备" class="headerlink" title="Ⅰ数据准备"></a><strong><font color="lightseagreen">Ⅰ数据准备</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> MetDNA需要准备的数据包括一级数据peak table(csv格式)，二级数据(mgf格式或者msp)和样品信息sample.info(csv格式)。点击下载<a href="http://oxr5qv74w.bkt.clouddn.com/MetDNA.demo.data.POS.rar" target="_blank" rel="external">正离子demo数据</a>和<a href="http://oxr5qv74w.bkt.clouddn.com/MetDNA.demo.data.NEG.rar" target="_blank" rel="external">负离子demo数据</a>。</p> </h4><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><font color="red">注意：</font></h4><h4> <p style="line-height: 1.5em;" align="justify"> 如果正负离子模式数据都有，最后想使用正负离子模式的鉴定结果进行pathway分析，那么需要保证正负离子模式的样品名称保持一致，也就是同一个样品在正负离子模式数据中一样 </p> </h4><p> <strong>Table 1: demo数据信息</strong></p><table><thead><tr><th>组别</th><th>个数</th><th>含义</th></tr></thead><tbody><tr><td>QC</td><td>8</td><td>QC</td></tr><tr><td>W03</td><td>10</td><td>野生型3天</td></tr><tr><td>W30</td><td>10</td><td>野生型30天</td></tr><tr><td>E03</td><td>10</td><td>突变型E3天</td></tr><tr><td>E30</td><td>10</td><td>突变型E30天</td></tr><tr><td>P03</td><td>10</td><td>突变型P3天</td></tr><tr><td>P30</td><td>10</td><td>突变型P30天</td></tr></tbody></table><h3 id="1-一级数据-data-csv"><a href="#1-一级数据-data-csv" class="headerlink" title="1. 一级数据(data.csv)"></a><strong><font color="lightseagreen">1. 一级数据(data.csv)</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 一级数据可以是使用XCMS，MZmine，MS-DIAL或者其他软件处理之后的数据。第一列必须为代谢物峰的名字，”name”，第二列为”mz”，第三列为保留时间(RT)，且单位必须为秒，其他为样品的峰强度，除此之外不需要其他任何信息，<strong>且前三列命名必须为”name”，”mz”， “rt”</strong>。 </p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/data.example.png" alt="**Figure 1: 一级数据peak table格式示例**"></p><h3 id="2-二级数据"><a href="#2-二级数据" class="headerlink" title="2. 二级数据"></a><strong><font color="lightseagreen">2. 二级数据</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 二级质谱原始数据可以是使用样品采集的DDA，DIA或者targeted MS/MS数据。对于DDA数据来说，也可以是分段采集的二级数据。对于DDA和targeted MS/MS数据来说，需要将质谱原始二级数据使用ProteoWizard软件转为mgf格式，转换时参数设置参考下图。对于DIA数据来说，可以使用MS-DIAL处理之后，将其输出的msp格式文件直接拿来使用。 </p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/ProteoWizard.png" alt="**Figure 2: ProteoWizard参数设置**"></p><h3 id="3-样品信息-sample-info"><a href="#3-样品信息-sample-info" class="headerlink" title="3. 样品信息(sample.info)"></a><strong><font color="lightseagreen">3. 样品信息(sample.info)</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 样品信息是样品的分组信息。第一列是样品名，命名为，”sample.name”，第二列是样品的分组信息，命名为，”group”。样品信息为csv文件，命名为sample.info.csv。 </p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/sample.info.png" alt="**Figure 3：样品信息示例**"></p><hr><h3 id="Ⅱ-数据整理"><a href="#Ⅱ-数据整理" class="headerlink" title="Ⅱ 数据整理"></a><strong><font color="lightseagreen">Ⅱ 数据整理</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 如果是正离子数据，请建立一个新的文件夹，命名为”POS”，如果是负离子数据，请建立一个新的文件夹命名为”NEG”，然后将一级数据<strong>(必须命名为data.csv)</strong>，二级数据(mgf或者msp格式)和样品信息<strong>(必须命名为sample.info.csv)</strong>放置于此文件夹下。<font color="red">并将该文件夹设置为路径</font>。现在<em>MetDNA</em>部署在小服务器上，因此需要将数据放在小服务器中<strong>(注意是labdata文件夹)</strong>。 </p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86.png" alt="**Figure 4: 将所需数据放置在文件夹中**"></p><hr><h3 id="Ⅲ-数据处理"><a href="#Ⅲ-数据处理" class="headerlink" title="Ⅲ 数据处理"></a><strong><font color="lightseagreen">Ⅲ 数据处理</font></strong></h3><h3 id="1-只有正离子或者负离子数据"><a href="#1-只有正离子或者负离子数据" class="headerlink" title="1. 只有正离子或者负离子数据"></a><strong><font color="lightseagreen">1. 只有正离子或者负离子数据</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 如果只有正离子或者负离子数据，那么请使用下面代码进行处理。所有的步骤可以使用一个函数<em>MetDNA</em>全部完成。</p> </h4><h4 id="设置工作路径并加载MetDNA。"><a href="#设置工作路径并加载MetDNA。" class="headerlink" title="设置工作路径并加载MetDNA。"></a>设置工作路径并加载<em>MetDNA</em>。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#设置工作路径并加载MetDNA</div><div class="line">setwd(&quot;/mnt/data/samba/labdata/workreport/Shen Xiaotao/demo/fly/POS&quot;)</div><div class="line">library(MetDNA)</div></pre></td></tr></table></figure><h4 id="运行MetDNA处理数据。"><a href="#运行MetDNA处理数据。" class="headerlink" title="运行MetDNA处理数据。"></a>运行<em>MetDNA</em>处理数据。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MetDNA(polarity = &quot;positive&quot;,</div><div class="line">       column = &quot;hilic&quot;,</div><div class="line">       ce = &quot;30&quot;,</div><div class="line">       use.default.md = TRUE,</div><div class="line">       group = c(&quot;W03&quot;, &quot;W30&quot;),</div><div class="line">       uni.test = &quot;t&quot;,</div><div class="line">       correct = TRUE,</div><div class="line">       p.cutoff = 0.01,</div><div class="line">       species = &quot;dme&quot;,</div><div class="line">       dn.analysis = FALSE,</div><div class="line">       pathway.enrichment = TRUE)</div></pre></td></tr></table></figure><blockquote><p><strong>参数含义如下：</strong></p></blockquote><ul><li><h4> <p style="line-height: 1.5em;" align="justify"> polarity：数据采集极性，”positive”，”negative”或者”both”。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> column：使用的柱子类型，”hilic”或者”rp”。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> ce：二级采集的碰撞能量，支持”10”，”15”，”20”，”25”，”30”，”35”，”35,15” (35±15)，”40”， “45”，”50”，”55”，”60”，”65”，”70”。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> use.default.md：进行保留时间预测模型建立时，是否使用默认的分子描述符，如果设置为FALSE，则会根据你的数据自动选择分子描述符。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> group：要对哪些分组的样品进行分析，注意，计算fold change时，使用后面的样品除以前面的样品。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> uni.test：单变量分析的方法，”t”，Student t test；”wilcox”，Wilcox test。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> correct：是否需要对p值进行FDR校正。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> p.cutoff：选择dysregulated peak时的p值cutoff。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> species：所研究样品的物种来源，”dme”，果蝇；”hsa”，人类；”mmu”，小鼠；”rat”，大鼠，”bta”，牛；”gga”，Gallus gallus (鸡)；”dre”，Danio rerio (斑马鱼)；”cel”，Caenorharomyces elegans (线虫)；”sce”，Saccharomyces cerevisaiae (酵母)； “ath”，Arabidopsis thaliana (拟南芥)；”smm”，Schistosoma mansoni；”pfa”，Plasmodum falciparum 3D7；”tbr”，Trypanosoma brucei；”eco”， Escherichia coli K-12 MG1655(大肠杆菌)；”ppu”，Pseudomonas putida KT2440；”syf”，Synechococcus elongatus。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> dn.analysis：是否进行紊乱网络分析，<font color="red">如果正负离子模式数据都有，那么需要将其设置为FALSE，如果只有一个模式的数据，那么设置为TRUE。</font></p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> pathway.enrichment：是否使用差异代谢物对应的代谢物直接进行pathway enrichment analysis，现在默认的是如果polarity为”positive”或者”negative”，则不进行分析，如果polarity为”both”，则进行分析。</p> </h4></li></ul><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a><strong><font color="red">注意：</font></strong></h4><ul><li><h4> <p style="line-height: 1.5em;" align="justify"> 因为现在只能对两组数据进行比较，因此group参数只能写两个，如果有三组数据，如A，B和C组，那么需要分来两次处理，第一次先比较A和B，即将group设置为c(“A”, “B”)，然后运行<em>MetDNA</em>，然后将已经得到的结果中的”Dysregulated_network_analysis_result”，”Pathway_enrichment_analysis_result”和”Analysis_report”重新命名，否则下次运行这两个文件夹中的内容会被覆盖掉，然后将group设置为c(“A”, “C”)，然后再次运行<em>MetDNA</em>。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> 如果只有一个模式的数据，那么dn.analysis参数设置为TRUE，如果正负离子模式数据都有，那么需要将其设置为FALSE。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> 如果只有一个模式的数据，那么pathway.enrichment参数设置为TRUE，如果正负离子模式数据都有，那么需要将其设置为FALSE。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> 进行pathway enrichment分析时，可以自定义用于pathway分析的差异代谢物峰及其注释结果。在MetDNA中，默认是按照p值进行筛选差异代谢物峰，并使用差异代谢物峰的所有注释结果进行后续的通路分析，如果想自己按照其他方式筛选差异代谢物峰及其对应的注释，那么需要将自己筛选到的代谢物峰及其注释命名为”marker.csv”，然后将其放置在”POS”或者”NEG”文件夹中，重新运行MetDNA函数即可。</p> </h4></li></ul><h3 id="2-正负离子模式数据都有情况下的处理"><a href="#2-正负离子模式数据都有情况下的处理" class="headerlink" title="2. 正负离子模式数据都有情况下的处理"></a><strong><font color="lightseagreen">2. 正负离子模式数据都有情况下的处理</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> 如果正负离子模式数据都有的话，那么需要首先将正负离子模式分别进行代谢物注释，而不进行后续的紊乱网络分析和通路分析，等正负离子模式数据都进行代谢物注释之后，再将其合并起来，进行后续分析。</p> </h4><h4 id="首先分析正离子数据。"><a href="#首先分析正离子数据。" class="headerlink" title="首先分析正离子数据。"></a>首先分析正离子数据。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">setwd(&quot;/mnt/data/samba/labdata/workreport/Shen Xiaotao/demo/fly/POS&quot;)</div><div class="line">library(MetDNA)</div><div class="line">MetDNA(polarity = &quot;positive&quot;,</div><div class="line">       column = &quot;hilic&quot;,</div><div class="line">       group = c(&quot;W03&quot;, &quot;W30&quot;),</div><div class="line">       uni.test = &quot;t&quot;,</div><div class="line">       correct = TRUE,</div><div class="line">       p.cutoff = 0.01,</div><div class="line">       species = &quot;dme&quot;,</div><div class="line">       dn.analysis = FALSE,</div><div class="line">       pathway.enrichment = FALSE)</div></pre></td></tr></table></figure><h4 id="然后分析负离子数据。"><a href="#然后分析负离子数据。" class="headerlink" title="然后分析负离子数据。"></a>然后分析负离子数据。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">setwd(&quot;/mnt/data/samba/labdata/workreport/Shen Xiaotao/demo/fly/NEG&quot;)</div><div class="line">MetDNA(polarity = &quot;negative&quot;,</div><div class="line">       column = &quot;hilic&quot;,</div><div class="line">       group = c(&quot;W03&quot;, &quot;W30&quot;),</div><div class="line">       uni.test = &quot;t&quot;,</div><div class="line">       correct = TRUE,</div><div class="line">       p.cutoff = 0.01,</div><div class="line">       species = &quot;dme&quot;,</div><div class="line">       dn.analysis = FALSE,</div><div class="line">       pathway.enrichment = FALSE)</div></pre></td></tr></table></figure><h4 id="然后合并分析。"><a href="#然后合并分析。" class="headerlink" title="然后合并分析。"></a>然后合并分析。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MetDNA(polarity = &quot;both&quot;,</div><div class="line">       column = &quot;hilic&quot;,</div><div class="line">       group = c(&quot;W03&quot;, &quot;W30&quot;),</div><div class="line">       uni.test = &quot;t&quot;,</div><div class="line">       correct = TRUE,</div><div class="line">       p.cutoff = 0.01,</div><div class="line">       species = &quot;dme&quot;,</div><div class="line">       dn.analysis = FALSE,</div><div class="line">       pathway.enrichment = TRUE)</div></pre></td></tr></table></figure><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a><strong><font color="red">注意：</font></strong></h4><ul><li><h4 id="参数含义可以参考上文。"><a href="#参数含义可以参考上文。" class="headerlink" title="参数含义可以参考上文。"></a>参数含义可以参考上文。</h4></li><li><h4 id="group的设置和注意事项也请参考上文。"><a href="#group的设置和注意事项也请参考上文。" class="headerlink" title="group的设置和注意事项也请参考上文。"></a>group的设置和注意事项也请参考上文。</h4></li></ul><hr><h3 id="Ⅳ-运行结果"><a href="#Ⅳ-运行结果" class="headerlink" title="Ⅳ 运行结果"></a><strong><font color="lightseagreen">Ⅳ 运行结果</font></strong></h3><h4> <p style="line-height: 1.5em;" align="justify"> <em>MetDNA</em>函数运行结束之后，所有的运行结果都存放在设置的路径中，包含二级谱图匹配鉴定结果，MRN注释结果，dysregulated network分析结果，pathway enrichment结果以及分析报告。如图5所示。<a href="https://www.processon.com/view/link/59e71c36e4b040dc8507df21" target="_blank" rel="external">点击此处观察分析结果结构图</a>。 </p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/analysis.result.png" alt="**Figure 5: 运行结果**"></p><h4 id="1-MetDNA-parameters-csv"><a href="#1-MetDNA-parameters-csv" class="headerlink" title="1 MetDNA.parameters.csv"></a><strong>1 MetDNA.parameters.csv</strong></h4><h4 id="记录此次运行所使用的参数。"><a href="#记录此次运行所使用的参数。" class="headerlink" title="记录此次运行所使用的参数。"></a>记录此次运行所使用的参数。</h4><h4 id="2-MS2-match-result-二级谱图匹配结果"><a href="#2-MS2-match-result-二级谱图匹配结果" class="headerlink" title="2 MS2_match_result (二级谱图匹配结果)"></a><strong>2 MS2_match_result (二级谱图匹配结果)</strong></h4><ul><li><h4> <p style="line-height: 1.5em;" align="justify"> <strong>ms2.match.annotation.result.csv</strong>：二级谱图匹配之后的结果，与<strong>MetAnalyzer</strong>处理之后的结果相同；</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> <strong>MS2_match_spectra</strong>：包含了所有二级谱图匹配结果图。 </p> </h4></li></ul><h4 id="3-MRN-annotation-result-基于metabolic-reacion-network注释结果"><a href="#3-MRN-annotation-result-基于metabolic-reacion-network注释结果" class="headerlink" title="3 MRN_annotation_result (基于metabolic reacion network注释结果)"></a><strong>3 MRN_annotation_result (基于metabolic reacion network注释结果)</strong></h4><ul><li><h4> <p style="line-height: 1.5em;" align="justify"><strong>MRN.annotation.result.csv：</strong>基于MRN的每一个peak的注释结果(Figure 6)。</p> </h4></li></ul><ul><li><h4> <p style="line-height: 1.5em;" align="justify"><strong>Seed_Neighbor_MS2_match_spectra：</strong>包含的是每个Seed和他neighbor之间的二级谱图匹配结果。</p> </h4></li></ul><p><img src="http://oy0flpoi6.bkt.clouddn.com/mrn.annotation.result1.png" alt="**Figure 6: MRN annotation result**"></p><h4 id="MRN-annotation-result-csv其中的一些列的含义："><a href="#MRN-annotation-result-csv其中的一些列的含义：" class="headerlink" title="MRN.annotation.result.csv其中的一些列的含义："></a><font color="red"><strong>MRN.annotation.result.csv</strong>其中的一些列的含义：</font></h4><ul><li><h4> <p style="line-height: 1.5em;" align="justify"><strong>Annotation.type：</strong>该peak的该注释的类型，其中seed代表是从二级谱图鉴定得到的，isotopeAnnotation是指是同位素峰注释得到的，adductAnnotation是指加合物峰注释得到的，metAnnotation是指邻近代谢物注释得到的；</p> </h4></li><li><h4 id="annotation-from-ID：该peak的该注释来自于哪个metabolite-ID"><a href="#annotation-from-ID：该peak的该注释来自于哪个metabolite-ID" class="headerlink" title="annotation.from.ID：该peak的该注释来自于哪个metabolite(ID);"></a><strong>annotation.from.ID：</strong>该peak的该注释来自于哪个metabolite(ID);</h4></li><li><h4 id="annotation-from-peak：该peak的该注释来自于哪个peak"><a href="#annotation-from-peak：该peak的该注释来自于哪个peak" class="headerlink" title="annotation.from.peak：该peak的该注释来自于哪个peak;"></a><strong>annotation.from.peak：</strong>该peak的该注释来自于哪个peak;</h4></li><li><h4 id="ID：注释代谢物结果的KEGG-ID"><a href="#ID：注释代谢物结果的KEGG-ID" class="headerlink" title="ID：注释代谢物结果的KEGG ID;"></a><strong>ID：</strong>注释代谢物结果的KEGG ID;</h4></li><li><h4 id="compound-name：注释结果的名字；"><a href="#compound-name：注释结果的名字；" class="headerlink" title="compound.name：注释结果的名字；"></a><strong>compound.name：</strong>注释结果的名字；</h4></li><li><h4 id="isotope：同位素信息；"><a href="#isotope：同位素信息；" class="headerlink" title="isotope：同位素信息；"></a><strong>isotope：</strong>同位素信息；</h4></li><li><h4 id="adduct：加合物信息；"><a href="#adduct：加合物信息；" class="headerlink" title="adduct：加合物信息；"></a><strong>adduct：</strong>加合物信息；</h4></li><li><h4 id="Formula：化学结构式；"><a href="#Formula：化学结构式；" class="headerlink" title="Formula：化学结构式；"></a><strong>Formula：</strong>化学结构式；</h4></li><li><h4 id="score：注释打分；"><a href="#score：注释打分；" class="headerlink" title="score：注释打分；"></a><strong>score：</strong>注释打分；</h4></li><li><h4 id="peak-group：peak-group；"><a href="#peak-group：peak-group；" class="headerlink" title="peak.group：peak group；"></a><strong>peak.group：</strong>peak group；</h4></li><li><h4 id="confidence：对注释的peak-group打分。"><a href="#confidence：对注释的peak-group打分。" class="headerlink" title="confidence：对注释的peak group打分。"></a><strong>confidence：</strong>对注释的peak group打分。</h4></li></ul><h4 id="4-Dysregulated-network-analysis-result"><a href="#4-Dysregulated-network-analysis-result" class="headerlink" title="4 Dysregulated_network_analysis_result"></a><strong>4 Dysregulated_network_analysis_result</strong></h4><h4> <p style="line-height: 1.5em;" align="justify"> 1) volcano.plot是选取差异代谢物峰的火山图。每个代谢物峰的p值和fold change值可以从DNA.module.annotation.result.pos.csv中得到，或者在intermediate_data文件夹中有两个R文件，分别是p.value和fold.change。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 2) DNA.module.annotation.result.pos.csv是通过dysregulated modules对注释结果进行筛选以及KEGG database注释之后的注释结果。其中每列的含义可以参考<strong>MRN.annotation.result.csv</strong>的说明。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 3) DNA_module_information：module的一些结果，该文件夹结果暂时用不到，可以不看。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 4) DNA_function_annotation：紊乱网络的定性分析和定量分析结果。具体内容如下：</p> </h4><p><img src="http://oy0flpoi6.bkt.clouddn.com/DNA_functional_annotation.png" alt="**Figure 7: MRN annotation result**"></p><ul><li><h4> <p style="line-height: 1.5em;" align="justify">Cytoscape_data：dysregulated network用于cytoscape作图的文件。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> Dysregulated_network_boxplot：每个pathway的定量信息box plot。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> Dysregulated_network_heatmap：每个pathway的定量信息heatmap。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> Dysregulated_network_heatmap：每个pathway的定量信息heatmap。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> Quantitative_information：pathway的定量信息，以及每个代谢物对应的peak的信息。</p> </h4></li><li><h4> <p style="line-height: 1.5em;" align="justify"> DNA.pathway.enrichmetn.result.csv：dysregulated network通路富集结果。</p> </h4></li></ul><h4 id="5-Pathway-enrichment-analysis-result"><a href="#5-Pathway-enrichment-analysis-result" class="headerlink" title="5 Pathway_enrichment_analysis_result"></a><strong>5 Pathway_enrichment_analysis_result</strong></h4><h4> <p style="line-height: 1.5em;" align="justify"> 1) volcano.plot是选取差异代谢物峰的火山图。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 2) Pathway.enrichment.analysis.csv是使用差异代谢物峰对应的注释直接进行通路富集分析得到的富集结果。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 3) Pathway.enrichment.MSEA.pdf是pathway富集分析的结果。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 4) Pathway.enrichment.overview.pdf是pathway富集分析的结果的展示。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 4) Pathway.heatmap.pdf是pathway定量结果的热图展示。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 5) Boxplot文件夹：是每个通路的定量box plot展示。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 6) Heatmap文件夹：是每个通路的定量heat map展示。</p> </h4><h4> <p style="line-height: 1.5em;" align="justify"> 7) Quantitative_information：pathway的定量信息，以及每个代谢物对应的peak的信息。</p> </h4><h3 id="6-Analysis-report"><a href="#6-Analysis-report" class="headerlink" title="6 Analysis_report"></a><strong><font color="lightseagreen">6 Analysis_report</font></strong></h3><h4 id="对数据处理分析结果的总结。输出的结果存放在Analysis-report文件夹内。包括一份html格式的分析报告。"><a href="#对数据处理分析结果的总结。输出的结果存放在Analysis-report文件夹内。包括一份html格式的分析报告。" class="headerlink" title="对数据处理分析结果的总结。输出的结果存放在Analysis_report文件夹内。包括一份html格式的分析报告。"></a>对数据处理分析结果的总结。输出的结果存放在Analysis_report文件夹内。包括一份html格式的<a href="http://rpubs.com/Jasper/metdna_analysis_report" target="_blank" rel="external">分析报告</a>。</h4>]]></content>
    
    <summary type="html">
    
      MetDNA instruction。
    
    </summary>
    
      <category term="R software" scheme="http://yoursite.com/categories/R-software/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/categories/R-software/Metabolomics/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="Metabolomics" scheme="http://yoursite.com/tags/Metabolomics/"/>
    
  </entry>
  
  <entry>
    <title>MetCleaning instruction</title>
    <link href="http://yoursite.com/2017/09/09/2016-11-25-metcleaning/"/>
    <id>http://yoursite.com/2017/09/09/2016-11-25-metcleaning/</id>
    <published>2017-09-09T14:13:08.000Z</published>
    <updated>2017-09-09T14:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><strong>Introduction</strong></h2><hr><p><em>MetCleaning</em> provides an integrated and automatic pipeline for data cleaning and statistical analysis of large scale mass spectrometry (MS) based-metabolomic data. It includes missing value (MV) filtering and imputation, zero value filtering, data normalization, data integration, data quality assessment, univariate statistical analysis, multivariate statistical analysis such as PCA and PLS-DA, potential marker selection and show. This document describes how to use the integrated functions, <em>MetClean</em> and <em>MetStat</em> in <em>MetCleaning</em> utilizing demo data.</p><p><img src="/images/metcleaning/workflow for instruction.jpg" alt="Figure1 Workflow of *MetCleaning*"></p><h2 id="Installation-and-help"><a href="#Installation-and-help" class="headerlink" title="Installation and help"></a><strong>Installation and help</strong></h2><hr><p><em>MetCleaning</em> is published in github <a href="https://github.com/jaspershen/MetCleaning" target="_blank" rel="external">(link)</a>. So you can install it via to github.</p><p>code 1: Installation of <em>MetCleaning</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">##pcaMethods and impute should be installed form bioconductor</div><div class="line">##pcaMethos</div><div class="line">source(&quot;http://bioconductor.org/biocLite.R&quot;)</div><div class="line">    biocLite(&quot;pcaMethods&quot;)</div><div class="line">##impute</div><div class="line">source(&quot;http://bioconductor.org/biocLite.R&quot;)</div><div class="line">    biocLite(&quot;impute&quot;)</div><div class="line"> if(!require(devtools)) &#123;</div><div class="line">  install.packages(&quot;devtools&quot;)</div><div class="line"> &#125;</div><div class="line"> library(devtools)</div><div class="line"> install_github(&quot;jaspershen/MetCleaning&quot;)</div><div class="line"> library(MetCleaning)</div><div class="line"> help(package = &quot;MetCleaning&quot;)</div></pre></td></tr></table></figure><h2 id="Data-cleaning"><a href="#Data-cleaning" class="headerlink" title="Data cleaning"></a><strong>Data cleaning</strong></h2><hr><p>Data cleaning is integrated as a function named as <em>MetClean</em> in <em>MetCleaning</em>. We use the demo data as the example. Copy the code below and paste in you R console.</p><p>code 2: Demo data of <em>MetClean</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">##demo data</div><div class="line">data(data, package = &quot;MetCleaning&quot;)</div><div class="line">data(sample.information, package = &quot;MetCleaning&quot;)</div><div class="line">##demo work directory</div><div class="line">dir.create(&quot;Demo for MetCleaning&quot;)</div><div class="line">setwd(&quot;Demo for MetCleaning&quot;)</div><div class="line">##write files</div><div class="line">write.csv(data, &quot;data.csv&quot;, row.names = FALSE)</div><div class="line">write.csv(sample.information , &quot;sample.information.csv&quot;, row.names = FALSE)</div></pre></td></tr></table></figure><p>The demo data have been added in your work directory and organized in you work directory as Figure 2 shows. It contains two files, “data.csv” and “sample.information.csv”.</p><ol><li>“data.csv” is the metabolomic dataset you want to process. Rows are features and columns are feature abundance of samples and information of features. The information of features must contain “name” (feature name), “mz” (mass to change ratio) and “rt” (retention time). Other information of features are optional, for example “isotopes” and “adducts”. The name of sample can contain “.”, but cannot contain “-“ and space. And the start of sample name cannot be number. <strong>For example, “A210.a” and “A210a” are valid, and “210a” or “210-a” are invalid.</strong></li><li>“sample.information.csv” is sample information for metabolomic dataset. Column 1 is “sample.name” which is the names of subject and QC samples. Please confirm that the sample names in “sample.information.csv” and “data.csv” are completely same. Column 2 is “injection.order” which is the injection order of QC and subject samples. Column 3 is “class”, which is used to distinguish “QC” and “Subject” samples. Column 4 is “batch” to provide acquisition batch information for samples. Column 5 is “group”, which is used to label the group of subject sample, for example, “control” and “case”. The “group” of QC samples is labeled as “QC”.</li></ol><p><img src="/images/metcleaning/data organisation.jpg" alt="Figure2 Data organisation of MetCleaning"></p><p>Then you can run <em>MetClean</em> function to do data cleaning of data. All the arguments of <em>MetClean</em> can be found in the other functions in <em>MetCleaning</em>. You can use <em>help(package = “MetCleaning”)</em> to see the help page of <em>MetCleaning</em>.</p><p>code 3: Running of <em>MetClean</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##demo data</div><div class="line">MetClean(polarity = &quot;positive&quot;)</div></pre></td></tr></table></figure><p>Running results of <em>MetClean</em><br>1.Missing or zero values filtering. In the missing or zero value filtering step, if there are samples which beyond the threshold you set, you should decide to filter them or not. We recommend to remove all of them as Figure 3 shows.</p><p><img src="/images/metcleaning/mv filter.jpg" alt="Figure3 Missing or zero value filtering"></p><p>2.Sample filtering. In the QC or subject sample filtering step (based on PCA), if there are samples which beyond the threshold you set, you should decide to filter them or not. We don’t recommend to remove them as Figure 4 shows, because they should be consired combined other information.</p><p><img src="/images/metcleaning/sample filter.jpg" alt="Figure4 Sample filtering"></p><p>3.Output files. Output files of <em>MetClean</em> are listed as Figure 5 shows.<br>(1) “1MV overview”, “2MV filter”, “3Zero overview” and “4Zero filter” are missing and zero values filtering information.<br>(2) “5QC outlier filter” and “6Subject outlier filter” are sample filtering based on PCA information.<br>(3) “7Normalization result” is the data normalization information for each batch.<br>(4) “8Batch effect” is the batch effect both in before and after data cleaning.<br>(5) “9metabolite plot” is the scatter plot for each feature.<br>(6) “10Data overview” is the overview of data.<br>(7) “11RSD overview” is the RSD distribution for each batch both before and after data cleaning.<br>(8) <strong>“data_after_pre.csv”, “qc.info.csv” and “subject.info”</strong> are the data and sample information after data cleaning.<br>(9) “intermediate” is the intermediate data during processing.</p><p><img src="/images/metcleaning/output files of MetClean.jpg" alt="Figure5 Output files of *MetClean*"></p><h2 id="Statistical-analysis"><a href="#Statistical-analysis" class="headerlink" title="Statistical analysis"></a><strong>Statistical analysis</strong></h2><hr><p>Data statistical analysis is integrated as a function named as <em>MetStat</em> in <em>MetCleaning</em>. We use the demo data as the example. <strong>Please note that now <em>MetStat</em> can only process two class data.</strong> Copy the code below and paste in you R console.</p><p>code 4: Demo data of <em>MetStat</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data(&quot;met.data.after.pre&quot;, package = &quot;MetCleaning&quot;)</div><div class="line">data(new.group, package = &quot;MetCleaning&quot;)</div><div class="line">##create a folder for MetStat demo</div><div class="line">dir.create(&quot;Demo for MetStat&quot;)</div><div class="line">setwd(&quot;Demo for MetStat&quot;)</div><div class="line">## export the demo data as csv</div><div class="line">write.csv(new.group, &quot;new.group.csv&quot;, row.names = FALSE)</div></pre></td></tr></table></figure><p>The demo data have been added in your work directory. “new.group.csv” is a sample.information which has been changed the group information you want to use for statistical analysis. For the sample which you don’t want to use them for statistical analysis, you can set they group information as NA like Figure 6 shows.</p><p><img src="/images/metcleaning/new.group.jpg" alt="Figure6 new group information"></p><p>code 5: Running of <em>MetStat</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MetStat(MetFlowData = met.data.after.pre, new.group = TRUE)</div></pre></td></tr></table></figure><p>Running results of <em>MetStat</em><br>1.Sample removing. Firstly, you need to confirm the samples which you want to remove form dataset as Figure 7 shows.</p><p><img src="/images/metcleaning/sample remove.jpg" alt="Figure7 sample removing confirmation"></p><p>2.Number of component selection in PLS-DA analysis. In PLS-DA analysis, you should manually select the best choice of the number of component. When the Console show “How many comps do you want to see?”, you can type 10 and enter “Enter” key. Then a MSE plot is showing, and the best number of component is the one has the smallest CV values. So type the number (in this example is 4) and enter “Enter” key.</p><p><img src="/images/metcleaning/PLS analysis.jpg" alt="Figure8 Number of component selection in PLS-DA analysis"></p><p>3.Output files. Output files of <em>MetStat</em> are listed as Figure 9 shows.<br>(1) “12PCA analysis” is the PCA score plot.<br>(2) “13PLS analysis” contains the PLS-DA results.<br>(3) “14heatmap” is the heatmap.<br>(4) “15marker selection” contains the information of markers, volcano plot and boxplots of markers.<br>(5) <strong>“data_after_stat.csv”, “qc.info.csv” and “subject.info”</strong> are the data and sample information after statistical analysis.<br>(6) “intermediate” is the intermediate data during processing.</p><p><img src="/images/metcleaning/output files of MetStat.jpg" alt="Figure9 Output files of *MetStat*"></p>]]></content>
    
    <summary type="html">
    
      The instruction of MetCleaning.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2017/09/09/2016-11-25-first-blog/"/>
    <id>http://yoursite.com/2017/09/09/2016-11-25-first-blog/</id>
    <published>2017-09-09T14:13:05.000Z</published>
    <updated>2017-09-09T14:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h2><p>我的博客使用markdown编写，使用的编辑器是ATOM，使用起来还是非常方便的。以后有时间，就用博客来记录我的学习，生活和工作。</p><p>申祖涛于上海</p><p>2016年11月25日晚8点十分</p>]]></content>
    
    <summary type="html">
    
      断断续续，鼓捣了好几天，终于搞懂了怎么使用github建立博客，值得纪念一下。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Github和Hexo建独立博客</title>
    <link href="http://yoursite.com/2017/09/09/2017-09-09-github-blog/"/>
    <id>http://yoursite.com/2017/09/09/2017-09-09-github-blog/</id>
    <published>2017-09-09T12:18:37.000Z</published>
    <updated>2017-09-09T12:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考了一篇<a href="https://github.com/limedroid/HexoLearning#42-直接方式" target="_blank" rel="external">非常好的文章</a>，然后结合自己的实际问题，讲解如何使用github结合hexo建立个人的独立博客。</p><h2 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1. Hexo介绍"></a>1. Hexo介绍</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>是基于NodeJs的静态博客框架，简单、轻量，其生成的静态网页可以托管在Github和Heroku上。</p><p>. 超快速度<br>. 支持MarkDown<br>. 一键部署<br>. 丰富的插件</p><p>下面以我的博客为例，<a href="https://shenxt.github.io/" target="_blank" rel="external">shenxt.github.io</a>为例，讲解如何部署自己的博客。</p><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><h3 id="2-1-安装node-js"><a href="#2-1-安装node-js" class="headerlink" title="2.1 安装node.js"></a>2.1 安装node.js</h3><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a>官网下载对应系统的安装包，按提示安装。</p><p>检验安装成功，在git shell中输入一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure><h3 id="2-2-安装hexo"><a href="#2-2-安装hexo" class="headerlink" title="2.2 安装hexo"></a>2.2 安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure><p>如果是mac，则需要输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure><h2 id="3-利用Hexo搭建一个博客"><a href="#3-利用Hexo搭建一个博客" class="headerlink" title="3. 利用Hexo搭建一个博客"></a>3. 利用Hexo搭建一个博客</h2><h3 id="3-1-创建博客目录shenxt-github-io"><a href="#3-1-创建博客目录shenxt-github-io" class="headerlink" title="3.1 创建博客目录shenxt@github.io"></a>3.1 创建博客目录shenxt@github.io</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init shenxt.github.io</div><div class="line">$ cd limedroid.github.io</div><div class="line">$ npm install</div></pre></td></tr></table></figure><h3 id="3-2-生成静态页面"><a href="#3-2-生成静态页面" class="headerlink" title="3.2 生成静态页面"></a>3.2 生成静态页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g # g is generate</div></pre></td></tr></table></figure><h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -p3600# is server</div></pre></td></tr></table></figure><p>然后可以打开浏览器，输入地址 localhost:3600 即可看到效果。</p><h2 id="4-发一篇文章试试"><a href="#4-发一篇文章试试" class="headerlink" title="4 发一篇文章试试"></a>4 发一篇文章试试</h2><h3 id="4-1-穿件一个新的博客"><a href="#4-1-穿件一个新的博客" class="headerlink" title="4.1 穿件一个新的博客"></a>4.1 穿件一个新的博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new test</div></pre></td></tr></table></figure><p>此时会在source/posts目录下生成test.md文件，输入一些内容，然后保存。</p><p>然后看一下效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo s -p3600# is server</div></pre></td></tr></table></figure><p>然后可以打开浏览器，输入地址 localhost:3600 即可看到效果。</p><h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5 配置"></a>5 配置</h2><p>网站的设置大部分都在_config.yml文件夹中，详细配置可以查看<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">官方文档</a>。</p><p>下面只列出简单常用配置:</p><p>.title -&gt; 网站标题<br>.subtitle -&gt; 网站副标题<br>.description -&gt; 网站描述<br>.author -&gt; 您的名字<br>.language -&gt; 网站使用的语言</p><p>注意：进行配置时，需要在冒号:后加一个英文空格。</p><h2 id="6-更换主题"><a href="#6-更换主题" class="headerlink" title="6 更换主题"></a>6 更换主题</h2><p>在网站配置文件_config.yml中，配置theme。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure><p>next是主题的名字。Hexo有不同的人贡献主题，可以到其<a href="https://hexo.io/themes/index.html" target="_blank" rel="external">官方网站</a>上下载不同主题。看中某一主题之后，直接点击其名字，进入到其github界面，然后复制其网址，使用下面代码，即可下载主题到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/fi3ework/hexo-theme-archer</div></pre></td></tr></table></figure><p>然后将博客的配置文件theme修改为archer即可。</p><p>观察效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo s -p3600# is server</div></pre></td></tr></table></figure><h2 id="7-部署到github上"><a href="#7-部署到github上" class="headerlink" title="7 部署到github上"></a>7 部署到github上</h2><h3 id="7-1-在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt-github-io。"><a href="#7-1-在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt-github-io。" class="headerlink" title="7.1 在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt.github.io。"></a>7.1 在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt.github.io。</h3><h3 id="7-2-安装hexo-deployer-git"><a href="#7-2-安装hexo-deployer-git" class="headerlink" title="7.2 安装hexo-deployer-git"></a>7.2 安装hexo-deployer-git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h3 id="7-3-网站配置git"><a href="#7-3-网站配置git" class="headerlink" title="7.3 网站配置git"></a>7.3 网站配置git</h3><p>在网上的配置文件_config.yml中配置deploy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type: git</div><div class="line">repo: https://github.com/shenxt/shenxt.github.io</div><div class="line">branch: master</div></pre></td></tr></table></figure><h3 id="7-4-部署"><a href="#7-4-部署" class="headerlink" title="7.4 部署"></a>7.4 部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d# d is deploy</div></pre></td></tr></table></figure><h2 id="贴标签，方便搜索"><a href="#贴标签，方便搜索" class="headerlink" title="贴标签，方便搜索"></a>贴标签，方便搜索</h2><h3 id="8-1-两个确认"><a href="#8-1-两个确认" class="headerlink" title="8.1 两个确认"></a>8.1 两个确认</h3><p>. 首先确认博客的配置文件中有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tag_dir: tags</div></pre></td></tr></table></figure><p>. 然后确认主题的配置文件有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags: tags</div></pre></td></tr></table></figure><h3 id="8-2-新建tags页面"><a href="#8-2-新建tags页面" class="headerlink" title="8.2 新建tags页面"></a>8.2 新建tags页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure><p>此时会在source/下生成tags/index.md文件。</p><h3 id="8-3-修改source-tags-index-md"><a href="#8-3-修改source-tags-index-md" class="headerlink" title="8.3 修改source/tags/index.md"></a>8.3 修改source/tags/index.md</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: tags</div><div class="line">date: 2015-10-20 06:49:50</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div></pre></td></tr></table></figure><h3 id="8-4-在文章中添加tags"><a href="#8-4-在文章中添加tags" class="headerlink" title="8.4 在文章中添加tags"></a>8.4 在文章中添加tags</h3><p>在你的文章中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line">- Tag1</div><div class="line">- Tag2</div><div class="line">- Tag3</div></pre></td></tr></table></figure><p>其文件头部类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: TagEditText</div><div class="line">date: 2016-11-19 10:44:25</div><div class="line">tags:</div><div class="line">- Tag1</div><div class="line">- Tag2</div><div class="line">- Tag3</div></pre></td></tr></table></figure><h2 id="9-分类，给文章归档"><a href="#9-分类，给文章归档" class="headerlink" title="9 分类，给文章归档"></a>9 分类，给文章归档</h2><h3 id="9-1-两个确认"><a href="#9-1-两个确认" class="headerlink" title="9.1 两个确认"></a>9.1 两个确认</h3><p>. 确认博客配置文件打开了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">category_dir: categories</div></pre></td></tr></table></figure><p>. 确认主题配置文件打开了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">categories: /categories</div></pre></td></tr></table></figure><h3 id="9-2-新建categories文件"><a href="#9-2-新建categories文件" class="headerlink" title="9.2 新建categories文件"></a>9.2 新建categories文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page categories</div></pre></td></tr></table></figure><h3 id="9-3-修改categories-index-md"><a href="#9-3-修改categories-index-md" class="headerlink" title="9.3 修改categories/index.md"></a>9.3 修改categories/index.md</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: categories</div><div class="line">date: 2015-10-20 06:49:50</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div></pre></td></tr></table></figure><h3 id="9-4-在文章中添加categories"><a href="#9-4-在文章中添加categories" class="headerlink" title="9.4 在文章中添加categories"></a>9.4 在文章中添加categories</h3><p>在文章中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- cate</div></pre></td></tr></table></figure><p>其文件头部类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: TagEditText</div><div class="line">date: 2016-11-19 10:44:25</div><div class="line">categories:</div><div class="line">- cate</div></pre></td></tr></table></figure><h2 id="10-添加评论功能"><a href="#10-添加评论功能" class="headerlink" title="10 添加评论功能"></a>10 添加评论功能</h2><p>这里推荐使用韩国的来必力系统。参考<a href="https://www.drixn.com/2017/LiveReCommentsSystem/" target="_blank" rel="external">这个博客</a>进行设置。</p>]]></content>
    
    <summary type="html">
    
      使用github和Hexo建立个人博客。
    
    </summary>
    
      <category term="github technology" scheme="http://yoursite.com/categories/github-technology/"/>
    
    
      <category term="Chinese" scheme="http://yoursite.com/tags/Chinese/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Pages建独立博客</title>
    <link href="http://yoursite.com/2017/09/09/2012-02-22-github-pages/"/>
    <id>http://yoursite.com/2017/09/09/2012-02-22-github-pages/</id>
    <published>2017-09-09T11:50:42.000Z</published>
    <updated>2017-09-09T11:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://github.com" title="Github" target="_blank" rel="external">Github</a>很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如<a href="https://github.com/jquery/jquery" title="jQuery@github" target="_blank" rel="external">jQuery</a>、<a href="https://github.com/twitter/bootstrap" title="Twitter@github" target="_blank" rel="external">Twitter</a>等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了<a href="http://pages.github.com/" title="Github Pages" target="_blank" rel="external">Github Pages</a>的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p><p>Github Pages有以下几个优点：</p><ul><br>    <li>轻量级的博客系统，没有麻烦的配置</li><br>    <li>使用标记语言，比如<a href="http://markdown.tw" target="_blank" rel="external">Markdown</a></li><br>    <li>无需自己搭建服务器</li><br>    <li>根据Github的限制，对应的每个站有300MB空间</li><br>    <li>可以绑定自己的域名</li><br></ul><p>当然他也有缺点：</p><ul><li>使用<a href="https://github.com/mojombo/jekyll" title="Jekyll" target="_blank" rel="external">Jekyll</a>模板系统，相当于静态页发布，适合博客，文档介绍等。</li><li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</li><li>基于Git，很多东西需要动手，不像Wordpress有强大的后台</li></ul><p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。</p><h2 id="购买、绑定独立域名"><a href="#购买、绑定独立域名" class="headerlink" title="购买、绑定独立域名"></a>购买、绑定独立域名</h2><p>虽说<a href="http://www.godaddy.com/" title="Godaddy" target="_blank" rel="external">Godaddy</a>曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。</p><p>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。</p><p>流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在<a href="http://beiyuu.com" title="BeiYuu" target="_blank" rel="external">BeiYuu</a>也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。</p><p>我们选择<a href="https://www.dnspod.cn/" title="DNSPod" target="_blank" rel="external">DNSPod</a>的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：</p><ul><br>    <li>首先添加域名记录，可参考DNSPod的帮助文档：<a href="https://www.dnspod.cn/Support" target="_blank" rel="external">https://www.dnspod.cn/Support</a></li><br>    <li>在DNSPod自己的域名下添加一条<a href="http://baike.baidu.com/view/65575.htm" target="_blank" rel="external">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li><br>    <li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href="https://www.dnspod.cn/support/index/fid/119" target="_blank" rel="external">Godaddy注册的域名如何使用DNSPod</a></li><br>    <li>等待域名解析生效</li><br></ul><p>域名的配置部分完成，跪谢方校长。</p><h2 id="配置和使用Github"><a href="#配置和使用Github" class="headerlink" title="配置和使用Github"></a>配置和使用Github</h2><p>Git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本<a href="http://progit.org/book/zh/" title="Pro Git中文版" target="_blank" rel="external">Git中文教程</a>。</p><p>要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：<a href="http://code.google.com/p/msysgit/downloads/list" title="Windows版Git客户端" target="_blank" rel="external">http://code.google.com/p/msysgit/downloads/list</a>。其他系统的安装也可以参考官方的<a href="http://help.github.com/mac-set-up-git/" title="Mac下Git安装" target="_blank" rel="external">安装教程</a>。</p><p>下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。</p><p>在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：<br><img src="/images/githubpages/bootcamp_1_win_gitbash.jpg" alt="Git Bash"></p><h3 id="1、检查SSH-keys的设置"><a href="#1、检查SSH-keys的设置" class="headerlink" title="1、检查SSH keys的设置"></a>1、检查SSH keys的设置</h3><p>首先我们需要检查你电脑上现有的ssh key：</p><pre><code>$ cd ~/.ssh</code></pre><p>如果显示“No such file or directory”，跳到第三步，否则继续。</p><h3 id="2、备份和移除原来的ssh-key设置："><a href="#2、备份和移除原来的ssh-key设置：" class="headerlink" title="2、备份和移除原来的ssh key设置："></a>2、备份和移除原来的ssh key设置：</h3><p>因为已经存在key文件，所以需要备份旧的数据并删除：</p><pre><code>$ lsconfig    id_rsa    id_rsa.pub    known_hosts$ mkdir key_backup$ cp id_rsa* key_backup$ rm id_rsa*</code></pre><h3 id="3、生成新的SSH-Key："><a href="#3、生成新的SSH-Key：" class="headerlink" title="3、生成新的SSH Key："></a>3、生成新的SSH Key：</h3><p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p><pre><code>$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</code></pre><p>然后系统会要你输入加密串（<a href="http://help.github.com/ssh-key-passphrases/" target="_blank" rel="external">Passphrase</a>）：</p><pre><code>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt;</code></pre><p>最后看到这样的界面，就成功设置ssh key了：<br><img src="/images/githubpages/ssh-key-set.png" alt="ssh key success"></p><h3 id="4、添加SSH-Key到GitHub："><a href="#4、添加SSH-Key到GitHub：" class="headerlink" title="4、添加SSH Key到GitHub："></a>4、添加SSH Key到GitHub：</h3><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p><p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p><p>在GitHub的主页上点击设置按钮：<br><img src="/images/githubpages/github-account-setting.png" alt="github account setting"></p><p>选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：<br><img src="/images/githubpages/bootcamp_1_ssh.jpg" alt="set ssh keys"></p><p>PS：如果需要配置多个GitHub账号，可以参看这个<a href="http://omiga.org/blog/archives/2269" target="_blank" rel="external">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令<code>git config --global --unset user.email</code>删除用户账户设置，在每一个repo下面使用<code>git config --local user.email &#39;你的github邮箱@mail.com&#39;</code> 命令单独设置用户账户信息</p><h3 id="5、测试一下"><a href="#5、测试一下" class="headerlink" title="5、测试一下"></a>5、测试一下</h3><p>可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p><pre><code>$ ssh -T git@github.com</code></pre><p>如果是下面的反应：</p><pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>不要紧张，输入<code>yes</code>就好，然后会看到：</p><pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h3 id="6、设置你的账号信息"><a href="#6、设置你的账号信息" class="headerlink" title="6、设置你的账号信息"></a>6、设置你的账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p><pre><code>$ git config --global user.name &quot;你的名字&quot;$ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre><h4 id="设置GitHub的token"><a href="#设置GitHub的token" class="headerlink" title="设置GitHub的token"></a>设置GitHub的token</h4><p>2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了</p><p>有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。</p><p>在GitHub上，你可以点击<em>Account Setting &gt; Account Admin</em>：<br><img src="/images/githubpages/bootcamp_1_token.jpg" alt="set ssh keys"></p><p>然后在你的命令行中，输入下面的命令，把token添加进去：</p><pre><code>$ git config --global user.name &quot;你的名字&quot;$ git config --global user.token 0123456789your123456789token</code></pre><p>如果你改了GitHub的密码，需要重新设置token。</p><h3 id="成功了"><a href="#成功了" class="headerlink" title="成功了"></a>成功了</h3><p>好了，你已经可以成功连接GitHub了。</p><h2 id="使用GitHub-Pages建立博客"><a href="#使用GitHub-Pages建立博客" class="headerlink" title="使用GitHub Pages建立博客"></a>使用GitHub Pages建立博客</h2><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的<code>username.github.io</code>这样的用户&amp;组织页（站），另一种是依附项目的pages。</p><h3 id="User-amp-Organization-Pages"><a href="#User-amp-Organization-Pages" class="headerlink" title="User &amp; Organization Pages"></a>User &amp; Organization Pages</h3><p>想建立个人博客是用的第一种，形如<code>beiyuu.github.io</code>这样的可访问的站，每个用户名下面只能建立一个，创建之后点击<code>Admin</code>进入项目管理，可以看到是这样的：<br><img src="/images/githubpages/user-pages.png" alt="user pages"><br>而普通的项目是这样的，即使你也是用的<code>othername.github.io</code>：<br><img src="/images/githubpages/other-pages.png" alt="other pages"></p><p>创建好<code>username.github.io</code>项目之后，提交一个<code>index.html</code>文件，然后<code>push</code>到GitHub的<code>master</code>分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。</p><p>生效之后，访问<code>username.github.io</code>就可以看到你上传的页面了，<a href="http://beiyuu.github.io" target="_blank" rel="external">beiyuu.github.io</a>就是一个例子。</p><p>关于第二种项目<code>pages</code>，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的<code>gh-pages</code>分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考<a href="http://pages.github.com/" title="Github Pages" target="_blank" rel="external">Github Pages</a>的官方文档：</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让<code>username.github.io</code>能通过你自己的域名来访问，需要在项目的根目录下新建一个名为<code>CNAME</code>的文件，文件内容形如：</p><pre><code>beiyuu.com</code></pre><p>你也可以绑定在二级域名上：</p><pre><code>blog.beiyuu.com</code></pre><p>需要提醒的一点是，如果你使用形如<code>beiyuu.com</code>这样的一级域名的话，需要在DNS处设置A记录到<code>207.97.227.245</code>（<strong>这个地址会有变动，<a href="https://help.github.com/articles/my-custom-domain-isn-t-working" target="_blank" rel="external">这里</a>查看</strong>），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。</p><p>设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。</p><h2 id="Jekyll模板系统"><a href="#Jekyll模板系统" class="headerlink" title="Jekyll模板系统"></a>Jekyll模板系统</h2><p>GitHub Pages为了提供对HTML内容的支持，选择了<a href="https://github.com/mojombo/jekyll" title="Jekyll" target="_blank" rel="external">Jekyll</a>作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看<a href="https://github.com/mojombo/jekyll/blob/master/README.textile" target="_blank" rel="external">Jekyll官方文档</a>。</p><p>你可以直接fork<a href="https://github.com/beiyuu/Github-Pages-Example" target="_blank" rel="external">我的项目</a>，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。</p><h3 id="Jekyll基本结构"><a href="#Jekyll基本结构" class="headerlink" title="Jekyll基本结构"></a>Jekyll基本结构</h3><p>Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过<code>layout</code>将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。</p><p>基本的Jekyll结构如下：</p><pre><code>|-- _config.yml|-- _includes|-- _layouts|   |-- default.html|   `-- post.html|-- _posts|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile|   `-- 2009-04-26-barcamp-boston-4-roundup.textile|-- _site`-- index.html</code></pre><p>简单介绍一下他们的作用：</p><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>配置文件，用来定义你想要的效果，设置之后就不用关心了。</p><h4 id="includes"><a href="#includes" class="headerlink" title="_includes"></a>_includes</h4><p>可以用来存放一些小的可复用的模块，方便通过<code>{ % include file.ext %}</code>（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。</p><h4 id="layouts"><a href="#layouts" class="headerlink" title="_layouts"></a>_layouts</h4><p>这是模板文件存放的位置。模板需要通过<a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter" target="_blank" rel="external">YAML front matter</a>来定义，后面会讲到，<code>{ { content }}</code>标记用来将数据插入到这些模板中来。</p><h4 id="posts"><a href="#posts" class="headerlink" title="_posts"></a>_posts</h4><p>你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是<code>2012-02-22-artical-title.MARKUP</code>这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。</p><h4 id="site"><a href="#site" class="headerlink" title="_site"></a>_site</h4><p>这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的<code>.gitignore</code>文件中忽略它。</p><h4 id="其他文件夹"><a href="#其他文件夹" class="headerlink" title="其他文件夹"></a>其他文件夹</h4><p>你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了<code>project</code>文件夹，下面有一个<code>github-pages.md</code>的文件，那么你就可以通过<code>yoursite.com/project/github-pages</code>访问的到，如果你是使用一级域名的话。文件后缀可以是<code>.html</code>或者<code>markdown</code>或者<code>textile</code>。这里还有很多的例子：<a href="https://github.com/mojombo/jekyll/wiki/Sites" target="_blank" rel="external">https://github.com/mojombo/jekyll/wiki/Sites</a></p><h3 id="Jekyll的配置"><a href="#Jekyll的配置" class="headerlink" title="Jekyll的配置"></a>Jekyll的配置</h3><p>Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，<a href="https://github.com/mojombo/jekyll/wiki/configuration" target="_blank" rel="external">官方配置文档</a>有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是<code>Permalink</code>，还有就是自定义项。</p><p><code>Permalink</code>项用来定义你最终的文章链接是什么形式，他有下面几个变量：</p><ul><li><code>year</code> 文件名中的年份</li><li><code>month</code> 文件名中的月份</li><li><code>day</code> 文件名中的日期</li><li><code>title</code> 文件名中的文章标题</li><li><code>categories</code> 文章的分类，如果文章没有分类，会忽略</li><li><code>i-month</code> 文件名中的除去前缀0的月份</li><li><code>i-day</code> 文件名中的除去前缀0的日期</li></ul><p>看看最终的配置效果：</p><ul><li><code>permalink: pretty</code> /2009/04/29/slap-chop/index.html</li><li><code>permalink: /:month-:day-:year/:title.html</code> /04-29-2009/slap-chop.html</li><li><code>permalink: /blog/:year/:month/:day/:title</code> /blog/2009/04/29/slap-chop/index.html</li></ul><p>我使用的是：</p><ul><li><code>permalink: /:title</code> /github-pages</li></ul><p>自定义项的内容，例如我们定义了<code>title:BeiYuu的博客</code>这样一项，那么你就可以在文章中使用<code>{ { site.title }}</code>来引用这个变量了，非常方便定义些全局变量。</p><h3 id="YAML-Front-Matter和模板变量"><a href="#YAML-Front-Matter和模板变量" class="headerlink" title="YAML Front Matter和模板变量"></a>YAML Front Matter和模板变量</h3><p>对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：</p><pre><code>---layout: posttitle: Blogging Like a Hacker---</code></pre><p>前后的<code>---</code>不能省略，在这之间，你可以定一些你需要的变量，layout就是调用<code>_layouts</code>下面的某一个模板，他还有一些其他的变量可以使用：</p><ul><li><code>permalink</code> 你可以对某一篇文章使用通用设置之外的永久链接</li><li><code>published</code> 可以单独设置某一篇文章是否需要发布</li><li><code>category</code> 设置文章的分类</li><li><code>tags</code> 设置文章的tag</li></ul><p>上面的<code>title</code>就是自定义的内容，你也可以设置其他的内容，在文章中可以通过<code>{ { page.title }}</code>这样的形式调用。</p><p>模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：<a href="https://github.com/mojombo/jekyll/wiki/template-data" title="Jekyll Template Data" target="_blank" rel="external">https://github.com/mojombo/jekyll/wiki/template-data</a></p><h2 id="使用Disqus管理评论"><a href="#使用Disqus管理评论" class="headerlink" title="使用Disqus管理评论"></a>使用Disqus管理评论</h2><p>模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。</p><p>现在专做评论模块的产品有很多，比如<a href="http://disqus.com/" target="_blank" rel="external">Disqus</a>，还有国产的<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。</p><p>注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：<br><img src="/images/githubpages/disqus-site.jpg" alt="Disqus sites"></p><p>我们选择最下面的<code>Universal Code</code>就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：</p><pre><code>&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */    var disqus_shortname = &apos;example&apos;; // required: replace example with your forum shortname 这个地方需要改成你配置的网站名    /* * * DON&apos;T EDIT BELOW THIS LINE * * */    (function() {        var dsq = document.createElement(&apos;script&apos;); dsq.type = &apos;text/javascript&apos;; dsq.async = true;        dsq.src = &apos;http://&apos; + disqus_shortname + &apos;.disqus.com/embed.js&apos;;        (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(dsq);    })();&lt;/script&gt;&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;http://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;blog comments powered by &lt;span class=&quot;logo-disqus&quot;&gt;Disqus&lt;/span&gt;&lt;/a&gt;</code></pre><p>配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。</p><pre><code>$(&apos;#disqus_container .comment&apos;).on(&apos;click&apos;,function(){        $(this).html(&apos;加载中...&apos;);        var disqus_shortname = &apos;beiyuu&apos;;        var that = this;        BYB.includeScript(&apos;http://&apos; + disqus_shortname + &apos;.disqus.com/embed.js&apos;,function(){$(that).remove()}); //这是一个加载js的函数});</code></pre><p>如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，<a href="http://docs.disqus.com/developers/universal/" target="_blank" rel="external">帮助文档</a>在这里可以看到。</p><h2 id="代码高亮插件"><a href="#代码高亮插件" class="headerlink" title="代码高亮插件"></a>代码高亮插件</h2><p>如果写技术博客，代码高亮少不了，有两个可选插件<a href="http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine" target="_blank" rel="external">DlHightLight代码高亮组件</a>和<a href="http://code.google.com/p/google-code-prettify/" target="_blank" rel="external">Google Code Prettify</a>。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。</p><p>Google的高亮插件使用也比较方便，只需要在<code>&lt;pre&gt;</code>的标签上加入<code>prettyprint</code>即可。所以我选择了Google Code Prettify。</p><h2 id="搭建本地jekyll环境"><a href="#搭建本地jekyll环境" class="headerlink" title="搭建本地jekyll环境"></a>搭建本地jekyll环境</h2><p>这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的<a href="https://github.com/mojombo/jekyll/wiki/Install" target="_blank" rel="external">jekyll安装</a>。</p><p>作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：</p><pre><code>sudo gem sources --remove http://rubygems.org/sudo gem sources -a http://ruby.taobao.org/</code></pre><p>然后用Gem安装jekyll</p><pre><code>$ gem install jekyll</code></pre><p>不过一般如果有出错提示，你可能需要这样安装：</p><pre><code>$ sudo gem install jekyll</code></pre><p>我到了这一步的时候总是提示错误<code>Failed to build gem native extension</code>，很可能的一个原因是没有安装rvm，<a href="https://rvm.io/rvm/install/" target="_blank" rel="external">rvm的安装</a>可以参考这里，或者敲入下面的命令：</p><pre><code>$ curl -L https://get.rvm.io | bash -s stable --ruby</code></pre><p>然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置<code>markdown:rdiscount</code>：</p><pre><code>$ gem install jekyll rdiscount</code></pre><p>好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：</p><pre><code>$ jekyll serve --watch</code></pre><p>这个时候，你就可以通过<code>localhost:4000</code>来访问了。还有关于<a href="http://jekyllbootstrap.com/" target="_blank" rel="external">jekyll bootstrap</a>的资料，需要自己修改调试的，可以研究一下。</p><p>我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过<code>beiyuu.com/blog</code>访问的到，但是在本地环境下，总是<code>not found</code>，很是让人郁闷，看生成的<code>_site</code>目录下面的文件，也是正常的<code>blog.html</code>，但就是找不到，只有当我把URL改为<code>localhost:4000/blog.html</code>的时候，才能访问的到，环境不同真糟糕。</p><p>还有一个是关于<code>category</code>的问题，根据<code>YAML</code>的语法，我们在文章头部可以定义文章所属的类别，也可以定义为<code>category:[blog,rss]</code>这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇<a href="http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html" target="_blank" rel="external">Jekyll 本地调试之若干问题</a>，安装中如果有其他问题，也可以对照参考一下。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。</p>]]></content>
    
    <summary type="html">
    
      Github本身就是不错的代码社区，他也提供了一些其他的服务，比如Github Pages，使用它可以很方便的建立自己的独立博客，并且免费。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用R爬取HMDB和KEGG数据库</title>
    <link href="http://yoursite.com/2017/09/09/2016-12-03-keggandhmdb/"/>
    <id>http://yoursite.com/2017/09/09/2016-12-03-keggandhmdb/</id>
    <published>2017-09-09T11:50:30.000Z</published>
    <updated>2017-09-09T11:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="R语言爬虫"><a href="#R语言爬虫" class="headerlink" title="R语言爬虫"></a><strong>R语言爬虫</strong></h2><hr><p>虽然相对于python来说，R语言爬虫并不是那么流行，但是对于比较小的数据爬取量，使用R还是很方便的。R的数据爬取比较流行的是利用XML和RCurl包进行爬取，在这篇博客里面，我就利用XML和RCurl包进行KEGG和HMDB的数据爬取。</p><h2 id="爬取KEGG通路信息"><a href="#爬取KEGG通路信息" class="headerlink" title="爬取KEGG通路信息"></a><strong>爬取KEGG通路信息</strong></h2><hr><p>因为我需要的信息是KEGG的通路信息，比较简单，也就是每个通路包含哪些代谢物，只要人的metaboloic pathway，因此，我需要先将KEGG中的通路的网页链接拿到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">library(XML)</div><div class="line">library(RCurl)</div><div class="line">##从kegg主页上抓取代谢通路的url</div><div class="line">URL = getURL(&quot;http://www.genome.jp/kegg/pathway.html#global&quot;)</div><div class="line">doc &lt;- htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">xpath.a &lt;- &quot;//a/@href&quot;</div><div class="line">node &lt;- getNodeSet(doc, xpath.a)</div><div class="line">url1 &lt;- sapply(node, as.character)</div><div class="line"></div><div class="line">xpath.b &lt;- &quot;//a[@href]&quot;</div><div class="line">name &lt;- getNodeSet(doc, xpath.b)</div><div class="line">name &lt;- sapply(name, xmlValue)</div><div class="line"></div><div class="line">name2 &lt;- name[59:247]</div><div class="line">url2 &lt;- url1[59:247]</div><div class="line"></div><div class="line">url3 &lt;- url2[grep(&quot;show&quot;, url2)]</div><div class="line"></div><div class="line">pathwat.name &lt;- NULL</div><div class="line">metabolite.id &lt;- list()</div><div class="line">metabolite.name &lt;- list()</div><div class="line">for (i in 1:length(url3)) &#123;</div><div class="line">  cat(paste(i,&quot;/&quot;,length(url3)))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line">  URL &lt;- paste(&quot;http://www.genome.jp&quot;, url3[i], sep = &quot;&quot;)</div><div class="line">  URL = getURL(URL)</div><div class="line">  doc&lt;-htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">  xpath &lt;- &quot;//option[@value=&apos;hsa&apos;]&quot;</div><div class="line">  node&lt;-getNodeSet(doc, xpath)</div><div class="line">  if (length(node) ==0 ) &#123;</div><div class="line">    cat(&quot;No human pathwat.&quot;)</div><div class="line">    next()</div><div class="line">  &#125;else&#123;</div><div class="line">    URL &lt;- paste(&quot;http://www.genome.jp&quot;, url3[i], sep = &quot;&quot;)</div><div class="line">    URL &lt;- gsub(pattern = &quot;map=map&quot;, replacement = &quot;map=hsa&quot;, x = URL)</div><div class="line">    doc&lt;-htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">    xpath1 &lt;- &quot;//title&quot;</div><div class="line">    node&lt;-getNodeSet(doc, xpath1)</div><div class="line">    pathway.name[i] &lt;- xmlValue(node[[1]])</div><div class="line">    pathway.name[i] &lt;- substr(pathway.name[i], start = 2, stop = nchar(pathway.name[i])-1)</div><div class="line"></div><div class="line">    xpath2 &lt;- &quot;//area[@shape=&apos;circle&apos;]/@title&quot;</div><div class="line">    node&lt;-getNodeSet(doc, xpath2)</div><div class="line">    metabolite &lt;- lapply(node, function(x) as.character(x))</div><div class="line">    metabolite.name[[i]] &lt;- substr(metabolite, start = 9, nchar(metabolite)-1)</div><div class="line">    metabolite.id[[i]] &lt;- substr(metabolite, start = 1, stop = 6)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面对爬取到的代谢通路进行筛选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">idx &lt;- which(!is.na(pathway.name))</div><div class="line">pathway.name1 &lt;- pathway.name[idx]</div><div class="line">metabolite.id1 &lt;- metabolite.id[idx]</div><div class="line">metabolite.name1 &lt;- metabolite.name[idx]</div><div class="line"></div><div class="line">pathway.name2 &lt;- pathway.name1[-c(83,84)]</div><div class="line">metabolite.id2 &lt;- metabolite.id1[-c(83,84)]</div><div class="line">metabolite.name2 &lt;- metabolite.name1[-c(83,84)]</div></pre></td></tr></table></figure><p>将爬取到的信息保存输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">met.name &lt;- NULL</div><div class="line">met.id &lt;- NULL</div><div class="line">path.name &lt;- NULL</div><div class="line">for(i in 1:length(pathway.name2)) &#123;</div><div class="line">  met.name[i] &lt;- paste(metabolite.name2[[i]], collapse = &quot;;&quot;)</div><div class="line">  met.id[i] &lt;- paste(metabolite.id2[[i]], collapse = &quot;;&quot;)</div><div class="line">  path.name[i] &lt;- gsub(pattern = &quot;KEGG PATHWAY: &quot;, &quot;&quot;, pathway.name2[i])</div><div class="line">  path.name[i] &lt;- substr(path.name[i], start = 1, stop = nchar(path.name[i])-23)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">kegg &lt;- data.frame(path.name, met.name, met.id)</div><div class="line">write.csv(kegg, &quot;kegg.csv&quot;, row.names = F)</div><div class="line"></div><div class="line">save(path.name, file = &quot;path.name&quot;)</div><div class="line">save(met.name, file = &quot;met.name&quot;)</div><div class="line">save(met.id, file = &quot;met.id&quot;)</div><div class="line"></div><div class="line">kegg.met &lt;- list()</div><div class="line">kegg.met[[2]] &lt;- sapply(path.name, list)</div><div class="line">kegg.met[[1]] &lt;- metabolite.name2</div><div class="line">kegg.met[[3]] &lt;- metabolite.id2</div><div class="line"></div><div class="line">names(kegg.met) &lt;- c(&quot;gs&quot;, &quot;pathwaynames&quot;, &quot;metid&quot;)</div><div class="line"></div><div class="line">save(kegg.met, file = &quot;kegg.met&quot;)</div></pre></td></tr></table></figure><h2 id="爬取HMDB通路信息"><a href="#爬取HMDB通路信息" class="headerlink" title="爬取HMDB通路信息"></a><strong>爬取HMDB通路信息</strong></h2><hr><p>首先爬取HMDB的通路信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">##抓取HMDB通路信息</div><div class="line">library(XML)</div><div class="line">library(RCurl)</div><div class="line"></div><div class="line">hmdb.main &lt;- &quot;http://www.hmdb.ca/pathways?page=&quot;</div><div class="line">hmdb.main &lt;- paste(hmdb.main, c(2:46), sep = &quot;&quot;)</div><div class="line">hmdb.main &lt;- c(&quot;http://www.hmdb.ca/pathways&quot;, hmdb.main)</div><div class="line"></div><div class="line">##从HMDB主页上抓取代谢通路的url</div><div class="line">path.name &lt;- list()</div><div class="line">metabolite.id &lt;- list()</div><div class="line">spec &lt;- list()</div><div class="line">path.class &lt;- list()</div><div class="line">for (i in 40:length(hmdb.main)) &#123;</div><div class="line">  cat(paste(&quot;page&quot;,i))</div><div class="line">  cat(&quot;:&quot;)</div><div class="line">  URL = getURL(hmdb.main[i])</div><div class="line">  doc&lt;-htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">  xpath1 &lt;- &quot;//div[@class=&apos;panel-heading&apos;]&quot;</div><div class="line">  node1 &lt;- getNodeSet(doc, xpath1)</div><div class="line">  pathway.name &lt;- sapply(node1, xmlValue)</div><div class="line"></div><div class="line">  cat(paste(length(pathway.name), &quot;pathways&quot;))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line"></div><div class="line">  path.name[[i]] &lt;- pathway.name</div><div class="line"></div><div class="line">  xpath2 &lt;- &quot;//div[@class=&apos;panel-body&apos;]&quot;</div><div class="line">  node2 &lt;- getNodeSet(doc, xpath2)</div><div class="line"></div><div class="line">  metabolite &lt;- sapply(node2, xmlValue)</div><div class="line">  metabolite &lt;- unname(sapply(metabolite, function(x) &#123;gsub(&quot;Show&quot;, &quot; &quot;, x)&#125;))</div><div class="line"></div><div class="line">  idx &lt;- sapply(metabolite, function(x) &#123;gregexpr(&quot;HMDB[0-9]&#123;5&#125;&quot;, x)&#125;)</div><div class="line"></div><div class="line">  met.id &lt;- list()</div><div class="line">  for (j in 1:length(idx)) &#123;</div><div class="line">    id &lt;- NULL</div><div class="line">    for (k in 1:length(idx[[j]])) &#123;</div><div class="line">      id[k] &lt;- substr(metabolite[j], idx[[j]][k], idx[[j]][k]+8)</div><div class="line">    &#125;</div><div class="line">    met.id[[j]] &lt;- id</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  metabolite.id[[i]] &lt;- met.id</div><div class="line"></div><div class="line">  xpath.a &lt;- &quot;//a[@class=&apos;link-out&apos;]/@href&quot;</div><div class="line">  node&lt;-getNodeSet(doc, xpath.a)</div><div class="line"></div><div class="line">  url1 &lt;- sapply(node, as.character)</div><div class="line">  url1 &lt;- substr(url1, start = 1, stop = 29)</div><div class="line">  url1 &lt;- url1[!duplicated(url1)]</div><div class="line"></div><div class="line"></div><div class="line">  ###获取通路的人种和类别</div><div class="line">  species &lt;- NULL</div><div class="line">  metabolic &lt;- NULL</div><div class="line">  for (t in 1:length(url1)) &#123;</div><div class="line">    cat(paste(&quot;t:&quot;,t));cat(&quot; &quot;)</div><div class="line">    URL = getURL(url1[t])</div><div class="line">    doc &lt;- htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">    xpath &lt;- &quot;//div[@class=&apos;species&apos;]/text()&quot;</div><div class="line">    node &lt;- getNodeSet(doc, xpath)</div><div class="line">    species[t] &lt;- xmlValue(node[[1]])</div><div class="line"></div><div class="line">    xpath &lt;- &quot;//div[@id=&apos;des_subject&apos;]/text()&quot;</div><div class="line">    node &lt;- getNodeSet(doc, xpath)</div><div class="line">    metabolic[t] &lt;- xmlValue(node[[1]])</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  spec[[i]] &lt;- species</div><div class="line">  path.class[[i]] &lt;- metabolic</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对爬取到的代谢通路进行筛选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">save(path.name, file = &quot;path.name&quot;)</div><div class="line">save(metabolite.id, file = &quot;metabolite.id&quot;)</div><div class="line">save(spec, file = &quot;spec&quot;)</div><div class="line">save(path.class, file = &quot;path.class&quot;)</div><div class="line"></div><div class="line"></div><div class="line">pathway.name &lt;- NULL</div><div class="line">metabolite.ID &lt;- list()</div><div class="line">species &lt;- NULL</div><div class="line">pathway.class &lt;- NULL</div><div class="line">for (i in 1:length(path.name)) &#123;</div><div class="line">  pathway.name &lt;- c(pathway.name, path.name[[i]])</div><div class="line">  metabolite.ID &lt;- c(metabolite.ID, metabolite.id[[i]])</div><div class="line">  species &lt;- c(species, spec[[i]])</div><div class="line">  pathway.class &lt;- c(pathway.class, path.class[[i]])</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">pathway.class &lt;- substr(x = pathway.class, 1, regexpr(&quot;\\\n&quot;, pathway.class)-1)</div><div class="line"></div><div class="line">metabolite.name &lt;- list()</div><div class="line">for (i in 1:length(metabolite.ID)) &#123;</div><div class="line">  id &lt;- metabolite.ID[[i]]</div><div class="line">  idx &lt;- match(id, hmdbdatabase[,1])</div><div class="line">  name &lt;- hmdbdatabase[idx,2]</div><div class="line">  metabolite.name[[i]] &lt;- name</div><div class="line">&#125;</div><div class="line"></div><div class="line">a &lt;- unlist(lapply(metabolite.name, function(x) &#123;paste(x, collapse = &quot;;&quot;)&#125;))</div><div class="line">b &lt;- unlist(lapply(metabolite.ID, function(x) &#123;paste(x, collapse = &quot;;&quot;)&#125;))</div><div class="line"></div><div class="line">idx &lt;- grep(&quot;Metabolic&quot;, pathway.class)</div><div class="line"></div><div class="line">metabolite.name &lt;- metabolite.name[idx]</div><div class="line">metabolite.ID &lt;- metabolite.ID[idx]</div><div class="line">pathway.name &lt;- pathway.name[idx]</div><div class="line">pathway.class &lt;- pathway.class[idx]</div><div class="line">species &lt;- species[idx]</div><div class="line"></div><div class="line">hmdb.pathway &lt;- data.frame(pathway.name, pathway.class,a, b)[idx,]</div><div class="line">write.csv(hmdb.pathway, &quot;hmdb.pathway.csv&quot;)</div><div class="line"></div><div class="line">a &lt;- list()</div><div class="line">for (i in 1:length(pathway.name)) &#123;</div><div class="line">  a[[i]] &lt;- pathway.name[i]</div><div class="line">&#125;</div><div class="line"></div><div class="line">pathway.name &lt;- a</div><div class="line"></div><div class="line">hmdb.met &lt;- list(gs = metabolite.name, pathwaynames = pathway.name, id = metabolite.ID)</div><div class="line">save(hmdb.met, file = &quot;hmdb.met&quot;)</div></pre></td></tr></table></figure><h2 id="爬取HMDB代谢物信息"><a href="#爬取HMDB代谢物信息" class="headerlink" title="爬取HMDB代谢物信息"></a><strong>爬取HMDB代谢物信息</strong></h2><hr><p>首先，获得所有代谢物的页面链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">###抓取HMDB代谢物信息</div><div class="line">library(XML)</div><div class="line">library(RCurl)</div><div class="line"></div><div class="line">hmdb.main &lt;- &quot;http://www.hmdb.ca/metabolites?c=hmdb_id&amp;d=up&amp;page=&quot;</div><div class="line">hmdb.main &lt;- paste(hmdb.main, c(2:1681), sep = &quot;&quot;)</div><div class="line">hmdb.main &lt;- c(&quot;http://www.hmdb.ca/metabolites&quot;, hmdb.main)</div><div class="line"></div><div class="line">##从HMDB主页上抓取代谢物的url</div><div class="line">url &lt;- NULL</div><div class="line">for (i in 1:length(hmdb.main)) &#123;</div><div class="line">  cat(i)</div><div class="line">  cat(&quot; &quot;)</div><div class="line">  URL = getURL(hmdb.main[i])</div><div class="line">  doc&lt;-htmlParse(URL,encoding=&quot;utf-8&quot;)</div><div class="line">  xpath &lt;- &quot;//a[@href]/@href&quot;</div><div class="line">  node&lt;-getNodeSet(doc, xpath)</div><div class="line">  url1 &lt;- sapply(node, as.character)</div><div class="line">  url1 &lt;- url1[grep(&quot;metabolites/HMDB&quot;, url1)]</div><div class="line">  url1 &lt;- unique(url1)</div><div class="line">  url &lt;- c(url, url1)</div><div class="line">&#125;</div><div class="line"></div><div class="line">url1 &lt;- paste(&quot;http://www.hmdb.ca/&quot;,url, sep = &quot;&quot;)</div><div class="line">save(url1, file = &quot;url1&quot;)</div></pre></td></tr></table></figure><p>下面开始进行代谢物信息爬取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">library(mailR)</div><div class="line">for (i in 1:400) &#123;</div><div class="line">  cat(paste((i-1)*100+1,&quot;-&quot;,i*100,&quot;/&quot;, length(url1), sep = &quot;&quot;))</div><div class="line">  cat(&quot;\n&quot;)</div><div class="line">  URL &lt;- getURL(url1[((i-1)*100+1):(i*100)])</div><div class="line">  doc &lt;- htmlParse(URL, encoding=&quot;utf-8&quot;)</div><div class="line">  xpath1 &lt;- &quot;//tr&quot;</div><div class="line">  node1 &lt;- getNodeSet(doc, xpath1)</div><div class="line">  node1 &lt;- sapply(node1, xmlValue)</div><div class="line"></div><div class="line">  HMDB_ID[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(pattern = &quot;HMDB ID&quot;, replacement = &quot;&quot;,node1[grep(&quot;HMDB ID&quot;, node1)])</div><div class="line"></div><div class="line">  Common_Name[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;Common Name&quot;, &quot;&quot;,node1[grep(&quot;Common Name&quot;, node1)])</div><div class="line"></div><div class="line">  temp &lt;- gsub(&quot;SynonymsValueSource&quot;, &quot;&quot;,node1[grep(&quot;Synonyms&quot;, node1)])</div><div class="line">  temp &lt;- gsub(&quot;Generator&quot;, &quot;;&quot;,temp)</div><div class="line">  temp &lt;- gsub(&quot;ChEMBL&quot;, &quot;;&quot;,temp)</div><div class="line">  temp &lt;- gsub(&quot;ChEBI&quot;, &quot;;&quot;,temp)</div><div class="line">  Synonyms[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;HMDB&quot;, &quot;;&quot;,temp)</div><div class="line"></div><div class="line">  Chemical_Formula[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;Chemical Formula&quot;, &quot;&quot;,node1[grep(&quot;Chemical Formula&quot;, node1)])</div><div class="line"></div><div class="line">  Monoisotopic_Molecular_Weight[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;Monoisotopic Molecular Weight&quot;, &quot;&quot;,node1[grep(&quot;Monoisotopic Molecular Weight&quot;, node1)])</div><div class="line"></div><div class="line">  IUPAC_Name[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;IUPAC Name&quot;, &quot;&quot;,node1[grep(&quot;IUPAC Name&quot;, node1)])</div><div class="line"></div><div class="line">  Traditional_Name[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;Traditional Name&quot;, &quot;&quot;,node1[grep(&quot;Traditional Name&quot;, node1)])</div><div class="line"></div><div class="line">  CAS_Registry_Number[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;CAS Registry Number&quot;, &quot;&quot;,node1[grep(&quot;CAS Registry Number&quot;, node1)])</div><div class="line"></div><div class="line">  Origin[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    gsub(&quot;Origin&quot;, &quot;&quot;,node1[grep(&quot;Origin&quot;, node1)])</div><div class="line"></div><div class="line">  path &lt;- gsub(&quot;PathwaysNameSMPDB LinkKEGG Link&quot;, &quot;&quot;,node1[grep(&quot;Pathways&quot;, node1)])</div><div class="line">  Pathways[((i-1)*100+1):(i*100)] &lt;-</div><div class="line">    substr(path, 1, stop = regexpr(&quot;SMP&quot;, path)-1)</div><div class="line"></div><div class="line">  ##每100次保存一次</div><div class="line">  if (i*100 %in% seq(100, 60000, by = 100)) &#123;</div><div class="line">    cat(&quot;save data...\n&quot;)</div><div class="line">    save(HMDB_ID,</div><div class="line">         Common_Name,</div><div class="line">         Synonyms,</div><div class="line">         Chemical_Formula,</div><div class="line">         Monoisotopic_Molecular_Weight,</div><div class="line">         IUPAC_Name,</div><div class="line">         Traditional_Name,</div><div class="line">         CAS_Registry_Number,</div><div class="line">         Origin,</div><div class="line">         Pathways,</div><div class="line">         file = paste(&quot;hmdb.data&quot;,i*100))</div><div class="line"></div><div class="line">    send.mail(from = &quot;yourmail1@163.com&quot;,</div><div class="line">              to = c(&quot;youmail20@163.com&quot;),</div><div class="line">              subject = paste(&quot;WZZ GO ON:&quot;, i),</div><div class="line">              body = paste(&quot;WZZ still go on&quot;, i),</div><div class="line">              smtp = list(host.name = &quot;smtp.163.com&quot;, port = 465, user.name = &quot;yourmail1&quot;, passwd = &quot;passward&quot;, ssl = TRUE),</div><div class="line">              authenticate = TRUE,</div><div class="line">              send = TRUE)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为代谢物信息比较大，可能需要一晚上，因此想到了没爬取100个，就给自己发一封邮件，来对程序进行监控。</p><p>写的比较粗糙，有时间再好好修改一下。</p>]]></content>
    
    <summary type="html">
    
      因为最近需要使用代谢通路数据，因此想到了使用R编写爬虫爬取KEGG和HMDB数据。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年的第一篇博客</title>
    <link href="http://yoursite.com/2017/09/09/2017-02-12-firstblog2017/"/>
    <id>http://yoursite.com/2017/09/09/2017-02-12-firstblog2017/</id>
    <published>2017-09-09T11:50:26.000Z</published>
    <updated>2017-09-09T11:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的2016年"><a href="#我的2016年" class="headerlink" title="我的2016年"></a><strong>我的2016年</strong></h2><hr><p>现在想想，其实整个2016年真的是没什么收获，科研上没什么进展，技能上也没有什么提升，原本准备要学习的python，也在1-2个月之后，彻底的放弃了。现在可能只记得一点点皮毛了。那么2016年的问题到底在哪里呢？总结来说，可以分为下面几部分。</p><h3 id="效率低下"><a href="#效率低下" class="headerlink" title="效率低下"></a>效率低下</h3><p>不得不承认，我的学习效率真的是出奇的低下，从我上高中以来其实都是这样了，做什么事情都不能够专心致志。用高中同学利弟的话来说，是“玩的时候没有好好玩，学习的时候没有好好学习”，用最近学到的一句话是“用战术上的勤奋来掩饰战略上的懒惰”。具体表现就是精神不集中，开小车。</p><h3 id="懒惰"><a href="#懒惰" class="headerlink" title="懒惰"></a>懒惰</h3><p>现在真的是越来越懒惰了，很多事情都没有以前有激情了，可能是我老了？</p><h3 id="没有明确的目标"><a href="#没有明确的目标" class="headerlink" title="没有明确的目标"></a>没有明确的目标</h3><p>上半年其实还是挺有目标的，但是到了下半年，目标突然就失焦了。定下一个目标，努力去实现，或者定下一个计划，努力去完成。</p><p>上面就是我2016年的一个简短的总结了，当然不是只有这些问题，还有很多其他的问题，但是可能都是一些细节的问题，就不过多去写了。</p><h2 id="我的2017年计划"><a href="#我的2017年计划" class="headerlink" title="我的2017年计划"></a><strong>我的2017年计划</strong></h2><hr><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>很幸运的是自己还是发了两篇文章，但是都是很低分的，虽然够我毕业，但是其实自己知道并不足够，因此2017年的主要任务就是好好看文献，做实验，寻找思路，争取能够再发一篇高质量的你文章。</p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>毕竟我的课题和统计关系很大，自己的统计数据功底很差，希望可以在看文献以及资料的同时，好好学习一下统计，机器学习等知识，再课题中能够真正运用到。</p><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p>R是一个好东西，需要再深入的学习，主要是结合着统计去学习，并及时做好总计，以有道笔记和博客作为平台去记录自己的学习，即作为笔记也作为总结。</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>这个放到最后，是因为可能很难有很多时间去学习了，希望前面几条比较顺利，才会有时间去做。</p><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>经过别人的提醒，还有这一项，确实自己看起来太瘦了，尤其是上半身，连衬衫和西装都撑不起来，等天气开始暖和了，就开始跑步，然后等中期答辩结束之后，考虑办一张健身卡，去健身！</p><p>最后的最后，提醒自己，最后一年，加油！</p>]]></content>
    
    <summary type="html">
    
      计划一下自己的2017年。
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
</feed>
